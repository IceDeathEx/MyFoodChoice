{"ast":null,"code":"'use strict';\n\nconst Packets = require('../packets/index.js');\nconst Command = require('./command.js');\nconst CloseStatement = require('./close_statement.js');\nconst Execute = require('./execute.js');\nclass PreparedStatementInfo {\n  constructor(query, id, columns, parameters, connection) {\n    this.query = query;\n    this.id = id;\n    this.columns = columns;\n    this.parameters = parameters;\n    this.rowParser = null;\n    this._connection = connection;\n  }\n  close() {\n    return this._connection.addCommand(new CloseStatement(this.id));\n  }\n  execute(parameters, callback) {\n    if (typeof parameters === 'function') {\n      callback = parameters;\n      parameters = [];\n    }\n    return this._connection.addCommand(new Execute({\n      statement: this,\n      values: parameters\n    }, callback));\n  }\n}\nclass Prepare extends Command {\n  constructor(options, callback) {\n    super();\n    this.query = options.sql;\n    this.onResult = callback;\n    this.id = 0;\n    this.fieldCount = 0;\n    this.parameterCount = 0;\n    this.fields = [];\n    this.parameterDefinitions = [];\n    this.options = options;\n  }\n  start(packet, connection) {\n    const Connection = connection.constructor;\n    this.key = Connection.statementKey(this.options);\n    const statement = connection._statements.get(this.key);\n    if (statement) {\n      if (this.onResult) {\n        this.onResult(null, statement);\n      }\n      return null;\n    }\n    const cmdPacket = new Packets.PrepareStatement(this.query, connection.config.charsetNumber, this.options.values);\n    connection.writePacket(cmdPacket.toPacket(1));\n    return Prepare.prototype.prepareHeader;\n  }\n  prepareHeader(packet, connection) {\n    const header = new Packets.PreparedStatementHeader(packet);\n    this.id = header.id;\n    this.fieldCount = header.fieldCount;\n    this.parameterCount = header.parameterCount;\n    if (this.parameterCount > 0) {\n      return Prepare.prototype.readParameter;\n    }\n    if (this.fieldCount > 0) {\n      return Prepare.prototype.readField;\n    }\n    return this.prepareDone(connection);\n  }\n  readParameter(packet, connection) {\n    // there might be scenarios when mysql server reports more parameters than\n    // are actually present in the array of parameter definitions.\n    // if EOF packet is received we switch to \"read fields\" state if there are\n    // any fields reported by the server, otherwise we finish the command.\n    if (packet.isEOF()) {\n      if (this.fieldCount > 0) {\n        return Prepare.prototype.readField;\n      }\n      return this.prepareDone(connection);\n    }\n    const def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this.parameterDefinitions.push(def);\n    if (this.parameterDefinitions.length === this.parameterCount) {\n      return Prepare.prototype.parametersEOF;\n    }\n    return this.readParameter;\n  }\n  readField(packet, connection) {\n    if (packet.isEOF()) {\n      return this.prepareDone(connection);\n    }\n    const def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this.fields.push(def);\n    if (this.fields.length === this.fieldCount) {\n      return Prepare.prototype.fieldsEOF;\n    }\n    return Prepare.prototype.readField;\n  }\n  parametersEOF(packet, connection) {\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet after parameters');\n    }\n    if (this.fieldCount > 0) {\n      return Prepare.prototype.readField;\n    }\n    return this.prepareDone(connection);\n  }\n  fieldsEOF(packet, connection) {\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet after fields');\n    }\n    return this.prepareDone(connection);\n  }\n  prepareDone(connection) {\n    const statement = new PreparedStatementInfo(this.query, this.id, this.fields, this.parameterDefinitions, connection);\n    connection._statements.set(this.key, statement);\n    if (this.onResult) {\n      this.onResult(null, statement);\n    }\n    return null;\n  }\n}\nmodule.exports = Prepare;","map":{"version":3,"names":["Packets","require","Command","CloseStatement","Execute","PreparedStatementInfo","constructor","query","id","columns","parameters","connection","rowParser","_connection","close","addCommand","execute","callback","statement","values","Prepare","options","sql","onResult","fieldCount","parameterCount","fields","parameterDefinitions","start","packet","Connection","key","statementKey","_statements","get","cmdPacket","PrepareStatement","config","charsetNumber","writePacket","toPacket","prototype","prepareHeader","header","PreparedStatementHeader","readParameter","readField","prepareDone","isEOF","def","ColumnDefinition","clientEncoding","push","length","parametersEOF","fieldsEOF","protocolError","set","module","exports"],"sources":["C:/Users/runes/FYP/myfoodchoice/node_modules/mysql2/lib/commands/prepare.js"],"sourcesContent":["'use strict';\n\nconst Packets = require('../packets/index.js');\nconst Command = require('./command.js');\nconst CloseStatement = require('./close_statement.js');\nconst Execute = require('./execute.js');\n\nclass PreparedStatementInfo {\n  constructor(query, id, columns, parameters, connection) {\n    this.query = query;\n    this.id = id;\n    this.columns = columns;\n    this.parameters = parameters;\n    this.rowParser = null;\n    this._connection = connection;\n  }\n\n  close() {\n    return this._connection.addCommand(new CloseStatement(this.id));\n  }\n\n  execute(parameters, callback) {\n    if (typeof parameters === 'function') {\n      callback = parameters;\n      parameters = [];\n    }\n    return this._connection.addCommand(\n      new Execute({ statement: this, values: parameters }, callback)\n    );\n  }\n}\n\nclass Prepare extends Command {\n  constructor(options, callback) {\n    super();\n    this.query = options.sql;\n    this.onResult = callback;\n    this.id = 0;\n    this.fieldCount = 0;\n    this.parameterCount = 0;\n    this.fields = [];\n    this.parameterDefinitions = [];\n    this.options = options;\n  }\n\n  start(packet, connection) {\n    const Connection = connection.constructor;\n    this.key = Connection.statementKey(this.options);\n    const statement = connection._statements.get(this.key);\n    if (statement) {\n      if (this.onResult) {\n        this.onResult(null, statement);\n      }\n      return null;\n    }\n    const cmdPacket = new Packets.PrepareStatement(\n      this.query,\n      connection.config.charsetNumber,\n      this.options.values\n    );\n    connection.writePacket(cmdPacket.toPacket(1));\n    return Prepare.prototype.prepareHeader;\n  }\n\n  prepareHeader(packet, connection) {\n    const header = new Packets.PreparedStatementHeader(packet);\n    this.id = header.id;\n    this.fieldCount = header.fieldCount;\n    this.parameterCount = header.parameterCount;\n    if (this.parameterCount > 0) {\n      return Prepare.prototype.readParameter;\n    } if (this.fieldCount > 0) {\n      return Prepare.prototype.readField;\n    } \n    return this.prepareDone(connection);\n  }\n\n  readParameter(packet, connection) {\n    // there might be scenarios when mysql server reports more parameters than\n    // are actually present in the array of parameter definitions.\n    // if EOF packet is received we switch to \"read fields\" state if there are\n    // any fields reported by the server, otherwise we finish the command.\n    if (packet.isEOF()) {\n      if (this.fieldCount > 0) {\n        return Prepare.prototype.readField;\n      }\n      return this.prepareDone(connection);\n    }\n    const def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this.parameterDefinitions.push(def);\n    if (this.parameterDefinitions.length === this.parameterCount) {\n      return Prepare.prototype.parametersEOF;\n    }\n    return this.readParameter;\n  }\n\n  readField(packet, connection) {\n    if (packet.isEOF()) {\n      return this.prepareDone(connection);\n    }\n    const def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this.fields.push(def);\n    if (this.fields.length === this.fieldCount) {\n      return Prepare.prototype.fieldsEOF;\n    }\n    return Prepare.prototype.readField;\n  }\n\n  parametersEOF(packet, connection) {\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet after parameters');\n    }\n    if (this.fieldCount > 0) {\n      return Prepare.prototype.readField;\n    } \n    return this.prepareDone(connection);\n    \n  }\n\n  fieldsEOF(packet, connection) {\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet after fields');\n    }\n    return this.prepareDone(connection);\n  }\n\n  prepareDone(connection) {\n    const statement = new PreparedStatementInfo(\n      this.query,\n      this.id,\n      this.fields,\n      this.parameterDefinitions,\n      connection\n    );\n    connection._statements.set(this.key, statement);\n    if (this.onResult) {\n      this.onResult(null, statement);\n    }\n    return null;\n  }\n}\n\nmodule.exports = Prepare;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}