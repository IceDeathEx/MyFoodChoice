{"ast":null,"code":"'use strict';\n\nconst Types = require('../constants/types.js');\nconst Charsets = require('../constants/charsets.js');\nconst helpers = require('../helpers');\nconst genFunc = require('generate-function');\nconst parserCache = require('./parser_cache.js');\nconst typeNames = [];\nfor (const t in Types) {\n  typeNames[Types[t]] = t;\n}\nfunction readCodeFor(type, charset, encodingExpr, config, options) {\n  const supportBigNumbers = options.supportBigNumbers || config.supportBigNumbers;\n  const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;\n  const timezone = options.timezone || config.timezone;\n  const dateStrings = options.dateStrings || config.dateStrings;\n  switch (type) {\n    case Types.TINY:\n    case Types.SHORT:\n    case Types.LONG:\n    case Types.INT24:\n    case Types.YEAR:\n      return 'packet.parseLengthCodedIntNoBigCheck()';\n    case Types.LONGLONG:\n      if (supportBigNumbers && bigNumberStrings) {\n        return 'packet.parseLengthCodedIntString()';\n      }\n      return `packet.parseLengthCodedInt(${supportBigNumbers})`;\n    case Types.FLOAT:\n    case Types.DOUBLE:\n      return 'packet.parseLengthCodedFloat()';\n    case Types.NULL:\n      return 'packet.readLengthCodedNumber()';\n    case Types.DECIMAL:\n    case Types.NEWDECIMAL:\n      if (config.decimalNumbers) {\n        return 'packet.parseLengthCodedFloat()';\n      }\n      return 'packet.readLengthCodedString(\"ascii\")';\n    case Types.DATE:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n      return `packet.parseDate('${timezone}')`;\n    case Types.DATETIME:\n    case Types.TIMESTAMP:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n      return `packet.parseDateTime('${timezone}')`;\n    case Types.TIME:\n      return 'packet.readLengthCodedString(\"ascii\")';\n    case Types.GEOMETRY:\n      return 'packet.parseGeometryValue()';\n    case Types.JSON:\n      // Since for JSON columns mysql always returns charset 63 (BINARY),\n      // we have to handle it according to JSON specs and use \"utf8\",\n      // see https://github.com/sidorares/node-mysql2/issues/409\n      return 'JSON.parse(packet.readLengthCodedString(\"utf8\"))';\n    default:\n      if (charset === Charsets.BINARY) {\n        return 'packet.readLengthCodedBuffer()';\n      }\n      return `packet.readLengthCodedString(${encodingExpr})`;\n  }\n}\nfunction compile(fields, options, config) {\n  // use global typeCast if current query doesn't specify one\n  if (typeof config.typeCast === 'function' && typeof options.typeCast !== 'function') {\n    options.typeCast = config.typeCast;\n  }\n  function wrap(field, _this) {\n    return {\n      type: typeNames[field.columnType],\n      length: field.columnLength,\n      db: field.schema,\n      table: field.table,\n      name: field.name,\n      string: function (encoding = field.encoding) {\n        if (field.columnType === Types.JSON && encoding === field.encoding) {\n          // Since for JSON columns mysql always returns charset 63 (BINARY),\n          // we have to handle it according to JSON specs and use \"utf8\",\n          // see https://github.com/sidorares/node-mysql2/issues/1661\n          console.warn(`typeCast: JSON column \"${field.name}\" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \\`field.string(\"utf8\")\\``);\n        }\n        return _this.packet.readLengthCodedString(encoding);\n      },\n      buffer: function () {\n        return _this.packet.readLengthCodedBuffer();\n      },\n      geometry: function () {\n        return _this.packet.parseGeometryValue();\n      }\n    };\n  }\n  const parserFn = genFunc();\n\n  /* eslint-disable no-trailing-spaces */\n  /* eslint-disable no-spaced-func */\n  /* eslint-disable no-unexpected-multiline */\n  parserFn('(function () {')('return class TextRow {');\n\n  // constructor method\n  parserFn('constructor(fields) {');\n  // node-mysql typeCast compatibility wrapper\n  // see https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/lib/protocol/packets/Field.js\n  if (typeof options.typeCast === 'function') {\n    parserFn('const _this = this;');\n    parserFn('for(let i=0; i<fields.length; ++i) {');\n    parserFn('this[`wrap${i}`] = wrap(fields[i], _this);');\n    parserFn('}');\n  }\n  parserFn('}');\n\n  // next method\n  parserFn('next(packet, fields, options) {');\n  parserFn(\"this.packet = packet;\");\n  if (options.rowsAsArray) {\n    parserFn(`const result = new Array(${fields.length});`);\n  } else {\n    parserFn(\"const result = {};\");\n  }\n  const resultTables = {};\n  let resultTablesArray = [];\n  if (options.nestTables === true) {\n    for (let i = 0; i < fields.length; i++) {\n      resultTables[fields[i].table] = 1;\n    }\n    resultTablesArray = Object.keys(resultTables);\n    for (let i = 0; i < resultTablesArray.length; i++) {\n      parserFn(`result[${helpers.srcEscape(resultTablesArray[i])}] = {};`);\n    }\n  }\n  let lvalue = '';\n  let fieldName = '';\n  for (let i = 0; i < fields.length; i++) {\n    fieldName = helpers.srcEscape(fields[i].name);\n    parserFn(`// ${fieldName}: ${typeNames[fields[i].columnType]}`);\n    if (typeof options.nestTables === 'string') {\n      lvalue = `result[${helpers.srcEscape(fields[i].table + options.nestTables + fields[i].name)}]`;\n    } else if (options.nestTables === true) {\n      lvalue = `result[${helpers.srcEscape(fields[i].table)}][${fieldName}]`;\n    } else if (options.rowsAsArray) {\n      lvalue = `result[${i.toString(10)}]`;\n    } else {\n      lvalue = `result[${fieldName}]`;\n    }\n    if (options.typeCast === false) {\n      parserFn(`${lvalue} = packet.readLengthCodedBuffer();`);\n    } else {\n      const encodingExpr = `fields[${i}].encoding`;\n      const readCode = readCodeFor(fields[i].columnType, fields[i].characterSet, encodingExpr, config, options);\n      if (typeof options.typeCast === 'function') {\n        parserFn(`${lvalue} = options.typeCast(this.wrap${i}, function() { return ${readCode} });`);\n      } else {\n        parserFn(`${lvalue} = ${readCode};`);\n      }\n    }\n  }\n  parserFn('return result;');\n  parserFn('}');\n  parserFn('};')('})()');\n\n  /* eslint-enable no-trailing-spaces */\n  /* eslint-enable no-spaced-func */\n  /* eslint-enable no-unexpected-multiline */\n\n  if (config.debug) {\n    helpers.printDebugWithCode('Compiled text protocol row parser', parserFn.toString());\n  }\n  if (typeof options.typeCast === 'function') {\n    return parserFn.toFunction({\n      wrap\n    });\n  }\n  return parserFn.toFunction();\n}\nfunction getTextParser(fields, options, config) {\n  return parserCache.getParser('text', fields, options, config, compile);\n}\nmodule.exports = getTextParser;","map":{"version":3,"names":["Types","require","Charsets","helpers","genFunc","parserCache","typeNames","t","readCodeFor","type","charset","encodingExpr","config","options","supportBigNumbers","bigNumberStrings","timezone","dateStrings","TINY","SHORT","LONG","INT24","YEAR","LONGLONG","FLOAT","DOUBLE","NULL","DECIMAL","NEWDECIMAL","decimalNumbers","DATE","typeMatch","DATETIME","TIMESTAMP","TIME","GEOMETRY","JSON","BINARY","compile","fields","typeCast","wrap","field","_this","columnType","length","columnLength","db","schema","table","name","string","encoding","console","warn","packet","readLengthCodedString","buffer","readLengthCodedBuffer","geometry","parseGeometryValue","parserFn","rowsAsArray","resultTables","resultTablesArray","nestTables","i","Object","keys","srcEscape","lvalue","fieldName","toString","readCode","characterSet","debug","printDebugWithCode","toFunction","getTextParser","getParser","module","exports"],"sources":["D:/UOW_FYP/FYP1/myfoodchoice/node_modules/mysql2/lib/parsers/text_parser.js"],"sourcesContent":["'use strict';\n\nconst Types = require('../constants/types.js');\nconst Charsets = require('../constants/charsets.js');\nconst helpers = require('../helpers');\nconst genFunc = require('generate-function');\nconst parserCache = require('./parser_cache.js');\n\nconst typeNames = [];\nfor (const t in Types) {\n  typeNames[Types[t]] = t;\n}\n\nfunction readCodeFor(type, charset, encodingExpr, config, options) {\n  const supportBigNumbers =\n    options.supportBigNumbers || config.supportBigNumbers;\n  const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;\n  const timezone = options.timezone || config.timezone;\n  const dateStrings = options.dateStrings || config.dateStrings;\n\n  switch (type) {\n    case Types.TINY:\n    case Types.SHORT:\n    case Types.LONG:\n    case Types.INT24:\n    case Types.YEAR:\n      return 'packet.parseLengthCodedIntNoBigCheck()';\n    case Types.LONGLONG:\n      if (supportBigNumbers && bigNumberStrings) {\n        return 'packet.parseLengthCodedIntString()';\n      }\n      return `packet.parseLengthCodedInt(${supportBigNumbers})`;\n    case Types.FLOAT:\n    case Types.DOUBLE:\n      return 'packet.parseLengthCodedFloat()';\n    case Types.NULL:\n      return 'packet.readLengthCodedNumber()';\n    case Types.DECIMAL:\n    case Types.NEWDECIMAL:\n      if (config.decimalNumbers) {\n        return 'packet.parseLengthCodedFloat()';\n      }\n      return 'packet.readLengthCodedString(\"ascii\")';\n    case Types.DATE:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n      return `packet.parseDate('${timezone}')`;\n    case Types.DATETIME:\n    case Types.TIMESTAMP:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n      return `packet.parseDateTime('${timezone}')`;\n    case Types.TIME:\n      return 'packet.readLengthCodedString(\"ascii\")';\n    case Types.GEOMETRY:\n      return 'packet.parseGeometryValue()';\n    case Types.JSON:\n      // Since for JSON columns mysql always returns charset 63 (BINARY),\n      // we have to handle it according to JSON specs and use \"utf8\",\n      // see https://github.com/sidorares/node-mysql2/issues/409\n      return 'JSON.parse(packet.readLengthCodedString(\"utf8\"))';\n    default:\n      if (charset === Charsets.BINARY) {\n        return 'packet.readLengthCodedBuffer()';\n      }\n      return `packet.readLengthCodedString(${encodingExpr})`;\n  }\n}\n\nfunction compile(fields, options, config) {\n  // use global typeCast if current query doesn't specify one\n  if (\n    typeof config.typeCast === 'function' &&\n    typeof options.typeCast !== 'function'\n  ) {\n    options.typeCast = config.typeCast;\n  }\n\n  function wrap(field, _this) {\n    return {\n      type: typeNames[field.columnType],\n      length: field.columnLength,\n      db: field.schema,\n      table: field.table,\n      name: field.name,\n      string: function(encoding = field.encoding) {\n        if (field.columnType === Types.JSON && encoding === field.encoding) {\n          // Since for JSON columns mysql always returns charset 63 (BINARY),\n          // we have to handle it according to JSON specs and use \"utf8\",\n          // see https://github.com/sidorares/node-mysql2/issues/1661\n          console.warn(`typeCast: JSON column \"${field.name}\" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \\`field.string(\"utf8\")\\``);\n        }\n\n        return _this.packet.readLengthCodedString(encoding);\n      },\n      buffer: function() {\n        return _this.packet.readLengthCodedBuffer();\n      },\n      geometry: function() {\n        return _this.packet.parseGeometryValue();\n      }\n    };\n  }\n\n  const parserFn = genFunc();\n\n  /* eslint-disable no-trailing-spaces */\n  /* eslint-disable no-spaced-func */\n  /* eslint-disable no-unexpected-multiline */\n  parserFn('(function () {')(\n    'return class TextRow {'\n  );\n\n  // constructor method\n  parserFn('constructor(fields) {');\n  // node-mysql typeCast compatibility wrapper\n  // see https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/lib/protocol/packets/Field.js\n  if (typeof options.typeCast === 'function') {\n    parserFn('const _this = this;');\n    parserFn('for(let i=0; i<fields.length; ++i) {');\n    parserFn('this[`wrap${i}`] = wrap(fields[i], _this);');\n    parserFn('}');\n  }\n  parserFn('}');\n\n  // next method\n  parserFn('next(packet, fields, options) {');\n  parserFn(\"this.packet = packet;\");\n  if (options.rowsAsArray) {\n    parserFn(`const result = new Array(${fields.length});`);\n  } else {\n    parserFn(\"const result = {};\");\n  }\n\n  const resultTables = {};\n  let resultTablesArray = [];\n\n  if (options.nestTables === true) {\n    for (let i=0; i < fields.length; i++) {\n      resultTables[fields[i].table] = 1;\n    }\n    resultTablesArray = Object.keys(resultTables);\n    for (let i=0; i < resultTablesArray.length; i++) {\n      parserFn(`result[${helpers.srcEscape(resultTablesArray[i])}] = {};`);\n    }\n  }\n\n  let lvalue = '';\n  let fieldName = '';\n  for (let i = 0; i < fields.length; i++) {\n    fieldName = helpers.srcEscape(fields[i].name);\n    parserFn(`// ${fieldName}: ${typeNames[fields[i].columnType]}`);\n    if (typeof options.nestTables === 'string') {\n      lvalue = `result[${helpers.srcEscape(\n        fields[i].table + options.nestTables + fields[i].name\n      )}]`;\n    } else if (options.nestTables === true) {\n      lvalue = `result[${helpers.srcEscape(fields[i].table)}][${fieldName}]`;\n    } else if (options.rowsAsArray) {\n      lvalue = `result[${i.toString(10)}]`;\n    } else {\n      lvalue = `result[${fieldName}]`;\n    }\n    if (options.typeCast === false) {\n      parserFn(`${lvalue} = packet.readLengthCodedBuffer();`);\n    } else {\n      const encodingExpr = `fields[${i}].encoding`;\n      const readCode = readCodeFor(\n        fields[i].columnType,\n        fields[i].characterSet,\n        encodingExpr,\n        config,\n        options\n      );\n      if (typeof options.typeCast === 'function') {\n        parserFn(`${lvalue} = options.typeCast(this.wrap${i}, function() { return ${readCode} });`);\n      }  else {\n        parserFn(`${lvalue} = ${readCode};`);\n      }\n    }\n  }\n\n  parserFn('return result;');\n  parserFn('}');\n  parserFn('};')('})()');\n\n  /* eslint-enable no-trailing-spaces */\n  /* eslint-enable no-spaced-func */\n  /* eslint-enable no-unexpected-multiline */\n\n  if (config.debug) {\n    helpers.printDebugWithCode(\n      'Compiled text protocol row parser',\n      parserFn.toString()\n    );\n  }\n  if (typeof options.typeCast === 'function') {\n    return parserFn.toFunction({wrap});\n  }\n  return parserFn.toFunction();\n}\n\nfunction getTextParser(fields, options, config) {\n  return parserCache.getParser('text', fields, options, config, compile);\n}\n\nmodule.exports = getTextParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}