{"ast":null,"code":"// This file was modified by Oracle on September 21, 2021.\n// The changes involve saving additional authentication factor passwords\n// in the command scope and enabling multi-factor authentication in the\n// client-side when the server supports it.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\nconst ClientConstants = require('../constants/client');\nconst ClientHandshake = require('./client_handshake.js');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\nclass ChangeUser extends Command {\n  constructor(options, callback) {\n    super();\n    this.onResult = callback;\n    this.user = options.user;\n    this.password = options.password;\n    // \"password1\" is an alias of \"password\"\n    this.password1 = options.password;\n    this.password2 = options.password2;\n    this.password3 = options.password3;\n    this.database = options.database;\n    this.passwordSha1 = options.passwordSha1;\n    this.charsetNumber = options.charsetNumber;\n    this.currentConfig = options.currentConfig;\n    this.authenticationFactor = 0;\n  }\n  start(packet, connection) {\n    const newPacket = new Packets.ChangeUser({\n      flags: connection.config.clientFlags,\n      user: this.user,\n      database: this.database,\n      charsetNumber: this.charsetNumber,\n      password: this.password,\n      passwordSha1: this.passwordSha1,\n      authPluginData1: connection._handshakePacket.authPluginData1,\n      authPluginData2: connection._handshakePacket.authPluginData2\n    });\n    this.currentConfig.user = this.user;\n    this.currentConfig.password = this.password;\n    this.currentConfig.database = this.database;\n    this.currentConfig.charsetNumber = this.charsetNumber;\n    connection.clientEncoding = CharsetToEncoding[this.charsetNumber];\n    // clear prepared statements cache as all statements become invalid after changeUser\n    connection._statements.clear();\n    connection.writePacket(newPacket.toPacket());\n    // check if the server supports multi-factor authentication\n    const multiFactorAuthentication = connection.serverCapabilityFlags & ClientConstants.MULTI_FACTOR_AUTHENTICATION;\n    if (multiFactorAuthentication) {\n      // if the server supports multi-factor authentication, we enable it in\n      // the client\n      this.authenticationFactor = 1;\n    }\n    return ChangeUser.prototype.handshakeResult;\n  }\n}\nChangeUser.prototype.handshakeResult = ClientHandshake.prototype.handshakeResult;\nChangeUser.prototype.calculateNativePasswordAuthToken = ClientHandshake.prototype.calculateNativePasswordAuthToken;\nmodule.exports = ChangeUser;","map":{"version":3,"names":["Command","require","Packets","ClientConstants","ClientHandshake","CharsetToEncoding","ChangeUser","constructor","options","callback","onResult","user","password","password1","password2","password3","database","passwordSha1","charsetNumber","currentConfig","authenticationFactor","start","packet","connection","newPacket","flags","config","clientFlags","authPluginData1","_handshakePacket","authPluginData2","clientEncoding","_statements","clear","writePacket","toPacket","multiFactorAuthentication","serverCapabilityFlags","MULTI_FACTOR_AUTHENTICATION","prototype","handshakeResult","calculateNativePasswordAuthToken","module","exports"],"sources":["D:/UOW_FYP/FYP1/myfoodchoice/node_modules/mysql2/lib/commands/change_user.js"],"sourcesContent":["// This file was modified by Oracle on September 21, 2021.\n// The changes involve saving additional authentication factor passwords\n// in the command scope and enabling multi-factor authentication in the\n// client-side when the server supports it.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\nconst ClientConstants = require('../constants/client');\nconst ClientHandshake = require('./client_handshake.js');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nclass ChangeUser extends Command {\n  constructor(options, callback) {\n    super();\n    this.onResult = callback;\n    this.user = options.user;\n    this.password = options.password;\n    // \"password1\" is an alias of \"password\"\n    this.password1 = options.password;\n    this.password2 = options.password2;\n    this.password3 = options.password3;\n    this.database = options.database;\n    this.passwordSha1 = options.passwordSha1;\n    this.charsetNumber = options.charsetNumber;\n    this.currentConfig = options.currentConfig;\n    this.authenticationFactor = 0;\n  }\n  start(packet, connection) {\n    const newPacket = new Packets.ChangeUser({\n      flags: connection.config.clientFlags,\n      user: this.user,\n      database: this.database,\n      charsetNumber: this.charsetNumber,\n      password: this.password,\n      passwordSha1: this.passwordSha1,\n      authPluginData1: connection._handshakePacket.authPluginData1,\n      authPluginData2: connection._handshakePacket.authPluginData2\n    });\n    this.currentConfig.user = this.user;\n    this.currentConfig.password = this.password;\n    this.currentConfig.database = this.database;\n    this.currentConfig.charsetNumber = this.charsetNumber;\n    connection.clientEncoding = CharsetToEncoding[this.charsetNumber];\n    // clear prepared statements cache as all statements become invalid after changeUser\n    connection._statements.clear();\n    connection.writePacket(newPacket.toPacket());\n    // check if the server supports multi-factor authentication\n    const multiFactorAuthentication = connection.serverCapabilityFlags & ClientConstants.MULTI_FACTOR_AUTHENTICATION;\n    if (multiFactorAuthentication) {\n      // if the server supports multi-factor authentication, we enable it in\n      // the client\n      this.authenticationFactor = 1;\n    }\n    return ChangeUser.prototype.handshakeResult;\n  }\n}\n\nChangeUser.prototype.handshakeResult =\n  ClientHandshake.prototype.handshakeResult;\nChangeUser.prototype.calculateNativePasswordAuthToken =\n  ClientHandshake.prototype.calculateNativePasswordAuthToken;\n\nmodule.exports = ChangeUser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}