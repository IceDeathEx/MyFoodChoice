{"ast":null,"code":"'use strict';\n\n// http://dev.mysql.com/doc/internals/en/query-event.html\nconst keys = {\n  FLAGS2: 0,\n  SQL_MODE: 1,\n  CATALOG: 2,\n  AUTO_INCREMENT: 3,\n  CHARSET: 4,\n  TIME_ZONE: 5,\n  CATALOG_NZ: 6,\n  LC_TIME_NAMES: 7,\n  CHARSET_DATABASE: 8,\n  TABLE_MAP_FOR_UPDATE: 9,\n  MASTER_DATA_WRITTEN: 10,\n  INVOKERS: 11,\n  UPDATED_DB_NAMES: 12,\n  MICROSECONDS: 3\n};\nmodule.exports = function parseStatusVars(buffer) {\n  const result = {};\n  let offset = 0;\n  let key, length, prevOffset;\n  while (offset < buffer.length) {\n    key = buffer[offset++];\n    switch (key) {\n      case keys.FLAGS2:\n        result.flags = buffer.readUInt32LE(offset);\n        offset += 4;\n        break;\n      case keys.SQL_MODE:\n        // value is 8 bytes, but all dcumented flags are in first 4 bytes\n        result.sqlMode = buffer.readUInt32LE(offset);\n        offset += 8;\n        break;\n      case keys.CATALOG:\n        length = buffer[offset++];\n        result.catalog = buffer.toString('utf8', offset, offset + length);\n        offset += length + 1; // null byte after string\n        break;\n      case keys.CHARSET:\n        result.clientCharset = buffer.readUInt16LE(offset);\n        result.connectionCollation = buffer.readUInt16LE(offset + 2);\n        result.serverCharset = buffer.readUInt16LE(offset + 4);\n        offset += 6;\n        break;\n      case keys.TIME_ZONE:\n        length = buffer[offset++];\n        result.timeZone = buffer.toString('utf8', offset, offset + length);\n        offset += length; // no null byte\n        break;\n      case keys.CATALOG_NZ:\n        length = buffer[offset++];\n        result.catalogNz = buffer.toString('utf8', offset, offset + length);\n        offset += length; // no null byte\n        break;\n      case keys.LC_TIME_NAMES:\n        result.lcTimeNames = buffer.readUInt16LE(offset);\n        offset += 2;\n        break;\n      case keys.CHARSET_DATABASE:\n        result.schemaCharset = buffer.readUInt16LE(offset);\n        offset += 2;\n        break;\n      case keys.TABLE_MAP_FOR_UPDATE:\n        result.mapForUpdate1 = buffer.readUInt32LE(offset);\n        result.mapForUpdate2 = buffer.readUInt32LE(offset + 4);\n        offset += 8;\n        break;\n      case keys.MASTER_DATA_WRITTEN:\n        result.masterDataWritten = buffer.readUInt32LE(offset);\n        offset += 4;\n        break;\n      case keys.INVOKERS:\n        length = buffer[offset++];\n        result.invokerUsername = buffer.toString('utf8', offset, offset + length);\n        offset += length;\n        length = buffer[offset++];\n        result.invokerHostname = buffer.toString('utf8', offset, offset + length);\n        offset += length;\n        break;\n      case keys.UPDATED_DB_NAMES:\n        length = buffer[offset++];\n        // length - number of null-terminated strings\n        result.updatedDBs = []; // we'll store them as array here\n        for (; length; --length) {\n          prevOffset = offset;\n          // fast forward to null terminating byte\n          while (buffer[offset++] && offset < buffer.length) {\n            // empty body, everything inside while condition\n          }\n          result.updatedDBs.push(buffer.toString('utf8', prevOffset, offset - 1));\n        }\n        break;\n      case keys.MICROSECONDS:\n        result.microseconds =\n        // REVIEW: INVALID UNKNOWN VARIABLE!\n        buffer.readInt16LE(offset) + (buffer[offset + 2] << 16);\n        offset += 3;\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["keys","FLAGS2","SQL_MODE","CATALOG","AUTO_INCREMENT","CHARSET","TIME_ZONE","CATALOG_NZ","LC_TIME_NAMES","CHARSET_DATABASE","TABLE_MAP_FOR_UPDATE","MASTER_DATA_WRITTEN","INVOKERS","UPDATED_DB_NAMES","MICROSECONDS","module","exports","parseStatusVars","buffer","result","offset","key","length","prevOffset","flags","readUInt32LE","sqlMode","catalog","toString","clientCharset","readUInt16LE","connectionCollation","serverCharset","timeZone","catalogNz","lcTimeNames","schemaCharset","mapForUpdate1","mapForUpdate2","masterDataWritten","invokerUsername","invokerHostname","updatedDBs","push","microseconds","readInt16LE"],"sources":["C:/Users/runes/FYP/myfoodchoice/node_modules/mysql2/lib/packets/binlog_query_statusvars.js"],"sourcesContent":["'use strict';\n\n// http://dev.mysql.com/doc/internals/en/query-event.html\n\nconst keys = {\n  FLAGS2: 0,\n  SQL_MODE: 1,\n  CATALOG: 2,\n  AUTO_INCREMENT: 3,\n  CHARSET: 4,\n  TIME_ZONE: 5,\n  CATALOG_NZ: 6,\n  LC_TIME_NAMES: 7,\n  CHARSET_DATABASE: 8,\n  TABLE_MAP_FOR_UPDATE: 9,\n  MASTER_DATA_WRITTEN: 10,\n  INVOKERS: 11,\n  UPDATED_DB_NAMES: 12,\n  MICROSECONDS: 3\n};\n\nmodule.exports = function parseStatusVars(buffer) {\n  const result = {};\n  let offset = 0;\n  let key, length, prevOffset;\n  while (offset < buffer.length) {\n    key = buffer[offset++];\n    switch (key) {\n      case keys.FLAGS2:\n        result.flags = buffer.readUInt32LE(offset);\n        offset += 4;\n        break;\n      case keys.SQL_MODE:\n        // value is 8 bytes, but all dcumented flags are in first 4 bytes\n        result.sqlMode = buffer.readUInt32LE(offset);\n        offset += 8;\n        break;\n      case keys.CATALOG:\n        length = buffer[offset++];\n        result.catalog = buffer.toString('utf8', offset, offset + length);\n        offset += length + 1; // null byte after string\n        break;\n      case keys.CHARSET:\n        result.clientCharset = buffer.readUInt16LE(offset);\n        result.connectionCollation = buffer.readUInt16LE(offset + 2);\n        result.serverCharset = buffer.readUInt16LE(offset + 4);\n        offset += 6;\n        break;\n      case keys.TIME_ZONE:\n        length = buffer[offset++];\n        result.timeZone = buffer.toString('utf8', offset, offset + length);\n        offset += length; // no null byte\n        break;\n      case keys.CATALOG_NZ:\n        length = buffer[offset++];\n        result.catalogNz = buffer.toString('utf8', offset, offset + length);\n        offset += length; // no null byte\n        break;\n      case keys.LC_TIME_NAMES:\n        result.lcTimeNames = buffer.readUInt16LE(offset);\n        offset += 2;\n        break;\n      case keys.CHARSET_DATABASE:\n        result.schemaCharset = buffer.readUInt16LE(offset);\n        offset += 2;\n        break;\n      case keys.TABLE_MAP_FOR_UPDATE:\n        result.mapForUpdate1 = buffer.readUInt32LE(offset);\n        result.mapForUpdate2 = buffer.readUInt32LE(offset + 4);\n        offset += 8;\n        break;\n      case keys.MASTER_DATA_WRITTEN:\n        result.masterDataWritten = buffer.readUInt32LE(offset);\n        offset += 4;\n        break;\n      case keys.INVOKERS:\n        length = buffer[offset++];\n        result.invokerUsername = buffer.toString(\n          'utf8',\n          offset,\n          offset + length\n        );\n        offset += length;\n        length = buffer[offset++];\n        result.invokerHostname = buffer.toString(\n          'utf8',\n          offset,\n          offset + length\n        );\n        offset += length;\n        break;\n      case keys.UPDATED_DB_NAMES:\n        length = buffer[offset++];\n        // length - number of null-terminated strings\n        result.updatedDBs = []; // we'll store them as array here\n        for (; length; --length) {\n          prevOffset = offset;\n          // fast forward to null terminating byte\n          while (buffer[offset++] && offset < buffer.length) {\n            // empty body, everything inside while condition\n          }\n          result.updatedDBs.push(\n            buffer.toString('utf8', prevOffset, offset - 1)\n          );\n        }\n        break;\n      case keys.MICROSECONDS:\n        result.microseconds =\n          // REVIEW: INVALID UNKNOWN VARIABLE!\n          buffer.readInt16LE(offset) + (buffer[offset + 2] << 16);\n        offset += 3;\n    }\n  }\n  return result;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}