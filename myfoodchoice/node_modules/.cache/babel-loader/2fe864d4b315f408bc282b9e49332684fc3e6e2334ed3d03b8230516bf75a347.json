{"ast":null,"code":"'use strict';\n\nconst CommandCode = require('../constants/commands.js');\nconst Errors = require('../constants/errors.js');\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\nclass ServerHandshake extends Command {\n  constructor(args) {\n    super();\n    this.args = args;\n    /*\n    this.protocolVersion = args.protocolVersion || 10;\n    this.serverVersion   = args.serverVersion;\n    this.connectionId    = args.connectionId,\n    this.statusFlags     = args.statusFlags,\n    this.characterSet    = args.characterSet,\n    this.capabilityFlags = args.capabilityFlags || 512;\n    */\n  }\n\n  start(packet, connection) {\n    const serverHelloPacket = new Packets.Handshake(this.args);\n    this.serverHello = serverHelloPacket;\n    serverHelloPacket.setScrambleData(err => {\n      if (err) {\n        connection.emit('error', new Error('Error generating random bytes'));\n        return;\n      }\n      connection.writePacket(serverHelloPacket.toPacket(0));\n    });\n    return ServerHandshake.prototype.readClientReply;\n  }\n  readClientReply(packet, connection) {\n    // check auth here\n    const clientHelloReply = Packets.HandshakeResponse.fromPacket(packet);\n    // TODO check we don't have something similar already\n    connection.clientHelloReply = clientHelloReply;\n    if (this.args.authCallback) {\n      this.args.authCallback({\n        user: clientHelloReply.user,\n        database: clientHelloReply.database,\n        address: connection.stream.remoteAddress,\n        authPluginData1: this.serverHello.authPluginData1,\n        authPluginData2: this.serverHello.authPluginData2,\n        authToken: clientHelloReply.authToken\n      }, (err, mysqlError) => {\n        // if (err)\n        if (!mysqlError) {\n          connection.writeOk();\n        } else {\n          // TODO create constants / errorToCode\n          // 1045 = ER_ACCESS_DENIED_ERROR\n          connection.writeError({\n            message: mysqlError.message || '',\n            code: mysqlError.code || 1045\n          });\n          connection.close();\n        }\n      });\n    } else {\n      connection.writeOk();\n    }\n    return ServerHandshake.prototype.dispatchCommands;\n  }\n  _isStatement(query, name) {\n    const firstWord = query.split(' ')[0].toUpperCase();\n    return firstWord === name;\n  }\n  dispatchCommands(packet, connection) {\n    // command from client to server\n    let knownCommand = true;\n    const encoding = connection.clientHelloReply.encoding;\n    const commandCode = packet.readInt8();\n    switch (commandCode) {\n      case CommandCode.STMT_PREPARE:\n        if (connection.listeners('stmt_prepare').length) {\n          const query = packet.readString(undefined, encoding);\n          connection.emit('stmt_prepare', query);\n        } else {\n          connection.writeError({\n            code: Errors.HA_ERR_INTERNAL_ERROR,\n            message: 'No query handler for prepared statements.'\n          });\n        }\n        break;\n      case CommandCode.STMT_EXECUTE:\n        if (connection.listeners('stmt_execute').length) {\n          const {\n            stmtId,\n            flags,\n            iterationCount,\n            values\n          } = Packets.Execute.fromPacket(packet, encoding);\n          connection.emit('stmt_execute', stmtId, flags, iterationCount, values);\n        } else {\n          connection.writeError({\n            code: Errors.HA_ERR_INTERNAL_ERROR,\n            message: 'No query handler for execute statements.'\n          });\n        }\n        break;\n      case CommandCode.QUIT:\n        if (connection.listeners('quit').length) {\n          connection.emit('quit');\n        } else {\n          connection.stream.end();\n        }\n        break;\n      case CommandCode.INIT_DB:\n        if (connection.listeners('init_db').length) {\n          const schemaName = packet.readString(undefined, encoding);\n          connection.emit('init_db', schemaName);\n        } else {\n          connection.writeOk();\n        }\n        break;\n      case CommandCode.QUERY:\n        if (connection.listeners('query').length) {\n          const query = packet.readString(undefined, encoding);\n          if (this._isStatement(query, 'PREPARE') || this._isStatement(query, 'SET')) {\n            connection.emit('stmt_prepare', query);\n          } else if (this._isStatement(query, 'EXECUTE')) {\n            connection.emit('stmt_execute', null, null, null, null, query);\n          } else connection.emit('query', query);\n        } else {\n          connection.writeError({\n            code: Errors.HA_ERR_INTERNAL_ERROR,\n            message: 'No query handler'\n          });\n        }\n        break;\n      case CommandCode.FIELD_LIST:\n        if (connection.listeners('field_list').length) {\n          const table = packet.readNullTerminatedString(encoding);\n          const fields = packet.readString(undefined, encoding);\n          connection.emit('field_list', table, fields);\n        } else {\n          connection.writeError({\n            code: Errors.ER_WARN_DEPRECATED_SYNTAX,\n            message: 'As of MySQL 5.7.11, COM_FIELD_LIST is deprecated and will be removed in a future version of MySQL.'\n          });\n        }\n        break;\n      case CommandCode.PING:\n        if (connection.listeners('ping').length) {\n          connection.emit('ping');\n        } else {\n          connection.writeOk();\n        }\n        break;\n      default:\n        knownCommand = false;\n    }\n    if (connection.listeners('packet').length) {\n      connection.emit('packet', packet.clone(), knownCommand, commandCode);\n    } else if (!knownCommand) {\n      // eslint-disable-next-line no-console\n      console.log('Unknown command:', commandCode);\n    }\n    return ServerHandshake.prototype.dispatchCommands;\n  }\n}\nmodule.exports = ServerHandshake;\n\n// TODO: implement server-side 4.1 authentication\n/*\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\n\n  SERVER:  public_seed=create_random_string()\n           send(public_seed)\n\n  CLIENT:  recv(public_seed)\n           hash_stage1=sha1(\"password\")\n           hash_stage2=sha1(hash_stage1)\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\n\n           // this three steps are done in scramble()\n\n           send(reply)\n\n\n  SERVER:  recv(reply)\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\n           candidate_hash2=sha1(hash_stage1)\n           check(candidate_hash2==hash_stage2)\n\nserver stores sha1(sha1(password)) ( hash_stag2)\n*/","map":{"version":3,"names":["CommandCode","require","Errors","Command","Packets","ServerHandshake","constructor","args","start","packet","connection","serverHelloPacket","Handshake","serverHello","setScrambleData","err","emit","Error","writePacket","toPacket","prototype","readClientReply","clientHelloReply","HandshakeResponse","fromPacket","authCallback","user","database","address","stream","remoteAddress","authPluginData1","authPluginData2","authToken","mysqlError","writeOk","writeError","message","code","close","dispatchCommands","_isStatement","query","name","firstWord","split","toUpperCase","knownCommand","encoding","commandCode","readInt8","STMT_PREPARE","listeners","length","readString","undefined","HA_ERR_INTERNAL_ERROR","STMT_EXECUTE","stmtId","flags","iterationCount","values","Execute","QUIT","end","INIT_DB","schemaName","QUERY","FIELD_LIST","table","readNullTerminatedString","fields","ER_WARN_DEPRECATED_SYNTAX","PING","clone","console","log","module","exports"],"sources":["C:/Users/runes/FYP/myfoodchoice/node_modules/mysql2/lib/commands/server_handshake.js"],"sourcesContent":["'use strict';\n\nconst CommandCode = require('../constants/commands.js');\nconst Errors = require('../constants/errors.js');\n\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\n\nclass ServerHandshake extends Command {\n  constructor(args) {\n    super();\n    this.args = args;\n    /*\n    this.protocolVersion = args.protocolVersion || 10;\n    this.serverVersion   = args.serverVersion;\n    this.connectionId    = args.connectionId,\n    this.statusFlags     = args.statusFlags,\n    this.characterSet    = args.characterSet,\n    this.capabilityFlags = args.capabilityFlags || 512;\n    */\n  }\n\n  start(packet, connection) {\n    const serverHelloPacket = new Packets.Handshake(this.args);\n    this.serverHello = serverHelloPacket;\n    serverHelloPacket.setScrambleData(err => {\n      if (err) {\n        connection.emit('error', new Error('Error generating random bytes'));\n        return;\n      }\n      connection.writePacket(serverHelloPacket.toPacket(0));\n    });\n    return ServerHandshake.prototype.readClientReply;\n  }\n\n  readClientReply(packet, connection) {\n    // check auth here\n    const clientHelloReply = Packets.HandshakeResponse.fromPacket(packet);\n    // TODO check we don't have something similar already\n    connection.clientHelloReply = clientHelloReply;\n    if (this.args.authCallback) {\n      this.args.authCallback(\n        {\n          user: clientHelloReply.user,\n          database: clientHelloReply.database,\n          address: connection.stream.remoteAddress,\n          authPluginData1: this.serverHello.authPluginData1,\n          authPluginData2: this.serverHello.authPluginData2,\n          authToken: clientHelloReply.authToken\n        },\n        (err, mysqlError) => {\n          // if (err)\n          if (!mysqlError) {\n            connection.writeOk();\n          } else {\n            // TODO create constants / errorToCode\n            // 1045 = ER_ACCESS_DENIED_ERROR\n            connection.writeError({\n              message: mysqlError.message || '',\n              code: mysqlError.code || 1045\n            });\n            connection.close();\n          }\n        }\n      );\n    } else {\n      connection.writeOk();\n    }\n    return ServerHandshake.prototype.dispatchCommands;\n  }\n\n  _isStatement(query, name) {\n    const firstWord = query.split(' ')[0].toUpperCase();\n    return firstWord === name;\n  }\n\n  dispatchCommands(packet, connection) {\n    // command from client to server\n    let knownCommand = true;\n    const encoding = connection.clientHelloReply.encoding;\n    const commandCode = packet.readInt8();\n    switch (commandCode) {\n      case CommandCode.STMT_PREPARE:\n        if (connection.listeners('stmt_prepare').length) {\n          const query = packet.readString(undefined, encoding);\n          connection.emit('stmt_prepare', query);\n        } else {\n          connection.writeError({\n            code: Errors.HA_ERR_INTERNAL_ERROR,\n            message:\n              'No query handler for prepared statements.'\n          });\n        }\n        break;\n      case CommandCode.STMT_EXECUTE:\n        if (connection.listeners('stmt_execute').length) {\n          const { stmtId, flags, iterationCount, values } = Packets.Execute.fromPacket(packet, encoding);\n          connection.emit('stmt_execute', stmtId, flags, iterationCount, values);\n        } else {\n          connection.writeError({\n            code: Errors.HA_ERR_INTERNAL_ERROR,\n            message:\n              'No query handler for execute statements.'\n          });\n        }\n        break;\n      case CommandCode.QUIT:\n        if (connection.listeners('quit').length) {\n          connection.emit('quit');\n        } else {\n          connection.stream.end();\n        }\n        break;\n      case CommandCode.INIT_DB:\n        if (connection.listeners('init_db').length) {\n          const schemaName = packet.readString(undefined, encoding);\n          connection.emit('init_db', schemaName);\n        } else {\n          connection.writeOk();\n        }\n        break;\n      case CommandCode.QUERY:\n        if (connection.listeners('query').length) {\n          const query = packet.readString(undefined, encoding);\n          if (this._isStatement(query, 'PREPARE') || this._isStatement(query, 'SET')) {\n            connection.emit('stmt_prepare', query);\n          }\n          else if (this._isStatement(query, 'EXECUTE')) {\n            connection.emit('stmt_execute', null, null, null, null, query);\n          }\n          else connection.emit('query', query);\n        } else {\n          connection.writeError({\n            code: Errors.HA_ERR_INTERNAL_ERROR,\n            message: 'No query handler'\n          });\n        }\n        break;\n      case CommandCode.FIELD_LIST:\n        if (connection.listeners('field_list').length) {\n          const table = packet.readNullTerminatedString(encoding);\n          const fields = packet.readString(undefined, encoding);\n          connection.emit('field_list', table, fields);\n        } else {\n          connection.writeError({\n            code: Errors.ER_WARN_DEPRECATED_SYNTAX,\n            message:\n              'As of MySQL 5.7.11, COM_FIELD_LIST is deprecated and will be removed in a future version of MySQL.'\n          });\n        }\n        break;\n      case CommandCode.PING:\n        if (connection.listeners('ping').length) {\n          connection.emit('ping');\n        } else {\n          connection.writeOk();\n        }\n        break;\n      default:\n        knownCommand = false;\n    }\n    if (connection.listeners('packet').length) {\n      connection.emit('packet', packet.clone(), knownCommand, commandCode);\n    } else if (!knownCommand) {\n      // eslint-disable-next-line no-console\n      console.log('Unknown command:', commandCode);\n    }\n    return ServerHandshake.prototype.dispatchCommands;\n  }\n}\n\nmodule.exports = ServerHandshake;\n\n// TODO: implement server-side 4.1 authentication\n/*\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\n\n  SERVER:  public_seed=create_random_string()\n           send(public_seed)\n\n  CLIENT:  recv(public_seed)\n           hash_stage1=sha1(\"password\")\n           hash_stage2=sha1(hash_stage1)\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\n\n           // this three steps are done in scramble()\n\n           send(reply)\n\n\n  SERVER:  recv(reply)\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\n           candidate_hash2=sha1(hash_stage1)\n           check(candidate_hash2==hash_stage2)\n\nserver stores sha1(sha1(password)) ( hash_stag2)\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}