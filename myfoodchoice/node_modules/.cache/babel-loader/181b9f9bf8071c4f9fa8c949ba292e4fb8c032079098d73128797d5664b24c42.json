{"ast":null,"code":"'use strict';\n\nconst Packet = require('../packets/packet');\nclass TextRow {\n  constructor(columns) {\n    this.columns = columns || [];\n  }\n  static fromPacket(packet) {\n    // packet.reset(); // set offset to starting point?\n    const columns = [];\n    while (packet.haveMoreData()) {\n      columns.push(packet.readLengthCodedString());\n    }\n    return new TextRow(columns);\n  }\n  static toPacket(columns, encoding) {\n    const sequenceId = 0; // TODO remove, this is calculated now in connecton\n    let length = 0;\n    columns.forEach(val => {\n      if (val === null || typeof val === 'undefined') {\n        ++length;\n        return;\n      }\n      length += Packet.lengthCodedStringLength(val.toString(10), encoding);\n    });\n    const buffer = Buffer.allocUnsafe(length + 4);\n    const packet = new Packet(sequenceId, buffer, 0, length + 4);\n    packet.offset = 4;\n    columns.forEach(val => {\n      if (val === null) {\n        packet.writeNull();\n        return;\n      }\n      if (typeof val === 'undefined') {\n        packet.writeInt8(0);\n        return;\n      }\n      packet.writeLengthCodedString(val.toString(10), encoding);\n    });\n    return packet;\n  }\n}\nmodule.exports = TextRow;","map":{"version":3,"names":["Packet","require","TextRow","constructor","columns","fromPacket","packet","haveMoreData","push","readLengthCodedString","toPacket","encoding","sequenceId","length","forEach","val","lengthCodedStringLength","toString","buffer","Buffer","allocUnsafe","offset","writeNull","writeInt8","writeLengthCodedString","module","exports"],"sources":["C:/Users/runes/FYP/myfoodchoice/node_modules/mysql2/lib/packets/text_row.js"],"sourcesContent":["'use strict';\n\nconst Packet = require('../packets/packet');\n\nclass TextRow {\n  constructor(columns) {\n    this.columns = columns || [];\n  }\n\n  static fromPacket(packet) {\n    // packet.reset(); // set offset to starting point?\n    const columns = [];\n    while (packet.haveMoreData()) {\n      columns.push(packet.readLengthCodedString());\n    }\n    return new TextRow(columns);\n  }\n\n  static toPacket(columns, encoding) {\n    const sequenceId = 0; // TODO remove, this is calculated now in connecton\n    let length = 0;\n    columns.forEach(val => {\n      if (val === null || typeof val === 'undefined') {\n        ++length;\n        return;\n      }\n      length += Packet.lengthCodedStringLength(val.toString(10), encoding);\n    });\n    const buffer = Buffer.allocUnsafe(length + 4);\n    const packet = new Packet(sequenceId, buffer, 0, length + 4);\n    packet.offset = 4;\n    columns.forEach(val => {\n      if (val === null) {\n        packet.writeNull();\n        return;\n      }\n      if (typeof val === 'undefined') {\n        packet.writeInt8(0);\n        return;\n      }\n      packet.writeLengthCodedString(val.toString(10), encoding);\n    });\n    return packet;\n  }\n}\n\nmodule.exports = TextRow;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAE3C,MAAMC,OAAO,CAAC;EACZC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;EAC9B;EAEA,OAAOC,UAAUA,CAACC,MAAM,EAAE;IACxB;IACA,MAAMF,OAAO,GAAG,EAAE;IAClB,OAAOE,MAAM,CAACC,YAAY,CAAC,CAAC,EAAE;MAC5BH,OAAO,CAACI,IAAI,CAACF,MAAM,CAACG,qBAAqB,CAAC,CAAC,CAAC;IAC9C;IACA,OAAO,IAAIP,OAAO,CAACE,OAAO,CAAC;EAC7B;EAEA,OAAOM,QAAQA,CAACN,OAAO,EAAEO,QAAQ,EAAE;IACjC,MAAMC,UAAU,GAAG,CAAC,CAAC,CAAC;IACtB,IAAIC,MAAM,GAAG,CAAC;IACdT,OAAO,CAACU,OAAO,CAACC,GAAG,IAAI;MACrB,IAAIA,GAAG,KAAK,IAAI,IAAI,OAAOA,GAAG,KAAK,WAAW,EAAE;QAC9C,EAAEF,MAAM;QACR;MACF;MACAA,MAAM,IAAIb,MAAM,CAACgB,uBAAuB,CAACD,GAAG,CAACE,QAAQ,CAAC,EAAE,CAAC,EAAEN,QAAQ,CAAC;IACtE,CAAC,CAAC;IACF,MAAMO,MAAM,GAAGC,MAAM,CAACC,WAAW,CAACP,MAAM,GAAG,CAAC,CAAC;IAC7C,MAAMP,MAAM,GAAG,IAAIN,MAAM,CAACY,UAAU,EAAEM,MAAM,EAAE,CAAC,EAAEL,MAAM,GAAG,CAAC,CAAC;IAC5DP,MAAM,CAACe,MAAM,GAAG,CAAC;IACjBjB,OAAO,CAACU,OAAO,CAACC,GAAG,IAAI;MACrB,IAAIA,GAAG,KAAK,IAAI,EAAE;QAChBT,MAAM,CAACgB,SAAS,CAAC,CAAC;QAClB;MACF;MACA,IAAI,OAAOP,GAAG,KAAK,WAAW,EAAE;QAC9BT,MAAM,CAACiB,SAAS,CAAC,CAAC,CAAC;QACnB;MACF;MACAjB,MAAM,CAACkB,sBAAsB,CAACT,GAAG,CAACE,QAAQ,CAAC,EAAE,CAAC,EAAEN,QAAQ,CAAC;IAC3D,CAAC,CAAC;IACF,OAAOL,MAAM;EACf;AACF;AAEAmB,MAAM,CAACC,OAAO,GAAGxB,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}