{"ast":null,"code":"'use strict';\n\nconst process = require('process');\nconst Timers = require('timers');\nconst Readable = require('stream').Readable;\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\nconst getTextParser = require('../parsers/text_parser.js');\nconst ServerStatus = require('../constants/server_status.js');\nconst EmptyPacket = new Packets.Packet(0, Buffer.allocUnsafe(4), 0, 4);\n\n// http://dev.mysql.com/doc/internals/en/com-query.html\nclass Query extends Command {\n  constructor(options, callback) {\n    super();\n    this.sql = options.sql;\n    this.values = options.values;\n    this._queryOptions = options;\n    this.namedPlaceholders = options.namedPlaceholders || false;\n    this.onResult = callback;\n    this.timeout = options.timeout;\n    this.queryTimeout = null;\n    this._fieldCount = 0;\n    this._rowParser = null;\n    this._fields = [];\n    this._rows = [];\n    this._receivedFieldsCount = 0;\n    this._resultIndex = 0;\n    this._localStream = null;\n    this._unpipeStream = function () {};\n    this._streamFactory = options.infileStreamFactory;\n    this._connection = null;\n  }\n  then() {\n    const err = \"You have tried to call .then(), .catch(), or invoked await on the result of query that is not a promise, which is a programming error. Try calling con.promise().query(), or require('mysql2/promise') instead of 'mysql2' for a promise-compatible version of the query interface. To learn how to use async/await or Promises check out documentation at https://www.npmjs.com/package/mysql2#using-promise-wrapper, or the mysql2 documentation at https://github.com/sidorares/node-mysql2/tree/master/documentation/en/Promise-Wrapper.md\";\n    // eslint-disable-next-line\n    console.log(err);\n    throw new Error(err);\n  }\n\n  /* eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }] */\n  start(_packet, connection) {\n    if (connection.config.debug) {\n      // eslint-disable-next-line\n      console.log('        Sending query command: %s', this.sql);\n    }\n    this._connection = connection;\n    this.options = Object.assign({}, connection.config, this._queryOptions);\n    this._setTimeout();\n    const cmdPacket = new Packets.Query(this.sql, connection.config.charsetNumber);\n    connection.writePacket(cmdPacket.toPacket(1));\n    return Query.prototype.resultsetHeader;\n  }\n  done() {\n    this._unpipeStream();\n    // if all ready timeout, return null directly\n    if (this.timeout && !this.queryTimeout) {\n      return null;\n    }\n    // else clear timer\n    if (this.queryTimeout) {\n      Timers.clearTimeout(this.queryTimeout);\n      this.queryTimeout = null;\n    }\n    if (this.onResult) {\n      let rows, fields;\n      if (this._resultIndex === 0) {\n        rows = this._rows[0];\n        fields = this._fields[0];\n      } else {\n        rows = this._rows;\n        fields = this._fields;\n      }\n      if (fields) {\n        process.nextTick(() => {\n          this.onResult(null, rows, fields);\n        });\n      } else {\n        process.nextTick(() => {\n          this.onResult(null, rows);\n        });\n      }\n    }\n    return null;\n  }\n  doneInsert(rs) {\n    if (this._localStreamError) {\n      if (this.onResult) {\n        this.onResult(this._localStreamError, rs);\n      } else {\n        this.emit('error', this._localStreamError);\n      }\n      return null;\n    }\n    this._rows.push(rs);\n    this._fields.push(void 0);\n    this.emit('fields', void 0);\n    this.emit('result', rs);\n    if (rs.serverStatus & ServerStatus.SERVER_MORE_RESULTS_EXISTS) {\n      this._resultIndex++;\n      return this.resultsetHeader;\n    }\n    return this.done();\n  }\n  resultsetHeader(packet, connection) {\n    const rs = new Packets.ResultSetHeader(packet, connection);\n    this._fieldCount = rs.fieldCount;\n    if (connection.config.debug) {\n      // eslint-disable-next-line\n      console.log(`        Resultset header received, expecting ${rs.fieldCount} column definition packets`);\n    }\n    if (this._fieldCount === 0) {\n      return this.doneInsert(rs);\n    }\n    if (this._fieldCount === null) {\n      return this._streamLocalInfile(connection, rs.infileName);\n    }\n    this._receivedFieldsCount = 0;\n    this._rows.push([]);\n    this._fields.push([]);\n    return this.readField;\n  }\n  _streamLocalInfile(connection, path) {\n    if (this._streamFactory) {\n      this._localStream = this._streamFactory(path);\n    } else {\n      this._localStreamError = new Error(`As a result of LOCAL INFILE command server wants to read ${path} file, but as of v2.0 you must provide streamFactory option returning ReadStream.`);\n      connection.writePacket(EmptyPacket);\n      return this.infileOk;\n    }\n    const onConnectionError = () => {\n      this._unpipeStream();\n    };\n    const onDrain = () => {\n      this._localStream.resume();\n    };\n    const onPause = () => {\n      this._localStream.pause();\n    };\n    const onData = function (data) {\n      const dataWithHeader = Buffer.allocUnsafe(data.length + 4);\n      data.copy(dataWithHeader, 4);\n      connection.writePacket(new Packets.Packet(0, dataWithHeader, 0, dataWithHeader.length));\n    };\n    const onEnd = () => {\n      connection.removeListener('error', onConnectionError);\n      connection.writePacket(EmptyPacket);\n    };\n    const onError = err => {\n      this._localStreamError = err;\n      connection.removeListener('error', onConnectionError);\n      connection.writePacket(EmptyPacket);\n    };\n    this._unpipeStream = () => {\n      connection.stream.removeListener('pause', onPause);\n      connection.stream.removeListener('drain', onDrain);\n      this._localStream.removeListener('data', onData);\n      this._localStream.removeListener('end', onEnd);\n      this._localStream.removeListener('error', onError);\n    };\n    connection.stream.on('pause', onPause);\n    connection.stream.on('drain', onDrain);\n    this._localStream.on('data', onData);\n    this._localStream.on('end', onEnd);\n    this._localStream.on('error', onError);\n    connection.once('error', onConnectionError);\n    return this.infileOk;\n  }\n  readField(packet, connection) {\n    this._receivedFieldsCount++;\n    // Often there is much more data in the column definition than in the row itself\n    // If you set manually _fields[0] to array of ColumnDefinition's (from previous call)\n    // you can 'cache' result of parsing. Field packets still received, but ignored in that case\n    // this is the reason _receivedFieldsCount exist (otherwise we could just use current length of fields array)\n    if (this._fields[this._resultIndex].length !== this._fieldCount) {\n      const field = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n      this._fields[this._resultIndex].push(field);\n      if (connection.config.debug) {\n        /* eslint-disable no-console */\n        console.log('        Column definition:');\n        console.log(`          name: ${field.name}`);\n        console.log(`          type: ${field.columnType}`);\n        console.log(`         flags: ${field.flags}`);\n        /* eslint-enable no-console */\n      }\n    }\n    // last field received\n    if (this._receivedFieldsCount === this._fieldCount) {\n      const fields = this._fields[this._resultIndex];\n      this.emit('fields', fields);\n      this._rowParser = new (getTextParser(fields, this.options, connection.config))(fields);\n      return Query.prototype.fieldsEOF;\n    }\n    return Query.prototype.readField;\n  }\n  fieldsEOF(packet, connection) {\n    // check EOF\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet');\n    }\n    return this.row;\n  }\n\n  /* eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }] */\n  row(packet, _connection) {\n    if (packet.isEOF()) {\n      const status = packet.eofStatusFlags();\n      const moreResults = status & ServerStatus.SERVER_MORE_RESULTS_EXISTS;\n      if (moreResults) {\n        this._resultIndex++;\n        return Query.prototype.resultsetHeader;\n      }\n      return this.done();\n    }\n    let row;\n    try {\n      row = this._rowParser.next(packet, this._fields[this._resultIndex], this.options);\n    } catch (err) {\n      this._localStreamError = err;\n      return this.doneInsert(null);\n    }\n    if (this.onResult) {\n      this._rows[this._resultIndex].push(row);\n    } else {\n      this.emit('result', row);\n    }\n    return Query.prototype.row;\n  }\n  infileOk(packet, connection) {\n    const rs = new Packets.ResultSetHeader(packet, connection);\n    return this.doneInsert(rs);\n  }\n  stream(options) {\n    options = options || {};\n    options.objectMode = true;\n    const stream = new Readable(options);\n    stream._read = () => {\n      this._connection && this._connection.resume();\n    };\n    this.on('result', row => {\n      if (!stream.push(row)) {\n        this._connection.pause();\n      }\n      stream.emit('result', row); // replicate old emitter\n    });\n\n    this.on('error', err => {\n      stream.emit('error', err); // Pass on any errors\n    });\n\n    this.on('end', () => {\n      stream.push(null); // pushing null, indicating EOF\n      stream.emit('close'); // notify readers that query has completed\n    });\n\n    this.on('fields', fields => {\n      stream.emit('fields', fields); // replicate old emitter\n    });\n\n    return stream;\n  }\n  _setTimeout() {\n    if (this.timeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.queryTimeout = Timers.setTimeout(timeoutHandler, this.timeout);\n    }\n  }\n  _handleTimeoutError() {\n    if (this.queryTimeout) {\n      Timers.clearTimeout(this.queryTimeout);\n      this.queryTimeout = null;\n    }\n    const err = new Error('Query inactivity timeout');\n    err.errorno = 'PROTOCOL_SEQUENCE_TIMEOUT';\n    err.code = 'PROTOCOL_SEQUENCE_TIMEOUT';\n    err.syscall = 'query';\n    if (this.onResult) {\n      this.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n  }\n}\nQuery.prototype.catch = Query.prototype.then;\nmodule.exports = Query;","map":{"version":3,"names":["process","require","Timers","Readable","Command","Packets","getTextParser","ServerStatus","EmptyPacket","Packet","Buffer","allocUnsafe","Query","constructor","options","callback","sql","values","_queryOptions","namedPlaceholders","onResult","timeout","queryTimeout","_fieldCount","_rowParser","_fields","_rows","_receivedFieldsCount","_resultIndex","_localStream","_unpipeStream","_streamFactory","infileStreamFactory","_connection","then","err","console","log","Error","start","_packet","connection","config","debug","Object","assign","_setTimeout","cmdPacket","charsetNumber","writePacket","toPacket","prototype","resultsetHeader","done","clearTimeout","rows","fields","nextTick","doneInsert","rs","_localStreamError","emit","push","serverStatus","SERVER_MORE_RESULTS_EXISTS","packet","ResultSetHeader","fieldCount","_streamLocalInfile","infileName","readField","path","infileOk","onConnectionError","onDrain","resume","onPause","pause","onData","data","dataWithHeader","length","copy","onEnd","removeListener","onError","stream","on","once","field","ColumnDefinition","clientEncoding","name","columnType","flags","fieldsEOF","isEOF","protocolError","row","status","eofStatusFlags","moreResults","next","objectMode","_read","timeoutHandler","_handleTimeoutError","bind","setTimeout","errorno","code","syscall","catch","module","exports"],"sources":["C:/Users/runes/FYP/myfoodchoice/node_modules/mysql2/lib/commands/query.js"],"sourcesContent":["'use strict';\n\nconst process = require('process');\nconst Timers = require('timers');\n\nconst Readable = require('stream').Readable;\n\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\nconst getTextParser = require('../parsers/text_parser.js');\nconst ServerStatus = require('../constants/server_status.js');\n\nconst EmptyPacket = new Packets.Packet(0, Buffer.allocUnsafe(4), 0, 4);\n\n// http://dev.mysql.com/doc/internals/en/com-query.html\nclass Query extends Command {\n  constructor(options, callback) {\n    super();\n    this.sql = options.sql;\n    this.values = options.values;\n    this._queryOptions = options;\n    this.namedPlaceholders = options.namedPlaceholders || false;\n    this.onResult = callback;\n    this.timeout = options.timeout;\n    this.queryTimeout = null;\n    this._fieldCount = 0;\n    this._rowParser = null;\n    this._fields = [];\n    this._rows = [];\n    this._receivedFieldsCount = 0;\n    this._resultIndex = 0;\n    this._localStream = null;\n    this._unpipeStream = function() {};\n    this._streamFactory = options.infileStreamFactory;\n    this._connection = null;\n  }\n\n  then() {\n    const err =\n      \"You have tried to call .then(), .catch(), or invoked await on the result of query that is not a promise, which is a programming error. Try calling con.promise().query(), or require('mysql2/promise') instead of 'mysql2' for a promise-compatible version of the query interface. To learn how to use async/await or Promises check out documentation at https://www.npmjs.com/package/mysql2#using-promise-wrapper, or the mysql2 documentation at https://github.com/sidorares/node-mysql2/tree/master/documentation/en/Promise-Wrapper.md\";\n    // eslint-disable-next-line\n    console.log(err);\n    throw new Error(err);\n  }\n\n  /* eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }] */\n  start(_packet, connection) {\n    if (connection.config.debug) {\n      // eslint-disable-next-line\n      console.log('        Sending query command: %s', this.sql);\n    }\n    this._connection = connection;\n    this.options = Object.assign({}, connection.config, this._queryOptions);\n    this._setTimeout();\n\n    const cmdPacket = new Packets.Query(\n      this.sql,\n      connection.config.charsetNumber\n    );\n    connection.writePacket(cmdPacket.toPacket(1));\n    return Query.prototype.resultsetHeader;\n  }\n\n  done() {\n    this._unpipeStream();\n    // if all ready timeout, return null directly\n    if (this.timeout && !this.queryTimeout) {\n      return null;\n    }\n    // else clear timer\n    if (this.queryTimeout) {\n      Timers.clearTimeout(this.queryTimeout);\n      this.queryTimeout = null;\n    }\n    if (this.onResult) {\n      let rows, fields;\n      if (this._resultIndex === 0) {\n        rows = this._rows[0];\n        fields = this._fields[0];\n      } else {\n        rows = this._rows;\n        fields = this._fields;\n      }\n      if (fields) {\n        process.nextTick(() => {\n          this.onResult(null, rows, fields);\n        });\n      } else {\n        process.nextTick(() => {\n          this.onResult(null, rows);\n        });\n      }\n    }\n    return null;\n  }\n\n  doneInsert(rs) {\n    if (this._localStreamError) {\n      if (this.onResult) {\n        this.onResult(this._localStreamError, rs);\n      } else {\n        this.emit('error', this._localStreamError);\n      }\n      return null;\n    }\n    this._rows.push(rs);\n    this._fields.push(void 0);\n    this.emit('fields', void 0);\n    this.emit('result', rs);\n    if (rs.serverStatus & ServerStatus.SERVER_MORE_RESULTS_EXISTS) {\n      this._resultIndex++;\n      return this.resultsetHeader;\n    }\n    return this.done();\n  }\n\n  resultsetHeader(packet, connection) {\n    const rs = new Packets.ResultSetHeader(packet, connection);\n    this._fieldCount = rs.fieldCount;\n    if (connection.config.debug) {\n      // eslint-disable-next-line\n      console.log(\n        `        Resultset header received, expecting ${rs.fieldCount} column definition packets`\n      );\n    }\n    if (this._fieldCount === 0) {\n      return this.doneInsert(rs);\n    }\n    if (this._fieldCount === null) {\n      return this._streamLocalInfile(connection, rs.infileName);\n    }\n    this._receivedFieldsCount = 0;\n    this._rows.push([]);\n    this._fields.push([]);\n    return this.readField;\n  }\n\n  _streamLocalInfile(connection, path) {\n    if (this._streamFactory) {\n      this._localStream = this._streamFactory(path);\n    } else {\n      this._localStreamError = new Error(\n        `As a result of LOCAL INFILE command server wants to read ${path} file, but as of v2.0 you must provide streamFactory option returning ReadStream.`\n      );\n      connection.writePacket(EmptyPacket);\n      return this.infileOk;\n    }\n\n    const onConnectionError = () => {\n      this._unpipeStream();\n    };\n    const onDrain = () => {\n      this._localStream.resume();\n    };\n    const onPause = () => {\n      this._localStream.pause();\n    };\n    const onData = function(data) {\n      const dataWithHeader = Buffer.allocUnsafe(data.length + 4);\n      data.copy(dataWithHeader, 4);\n      connection.writePacket(\n        new Packets.Packet(0, dataWithHeader, 0, dataWithHeader.length)\n      );\n    };\n    const onEnd = () => {\n      connection.removeListener('error', onConnectionError);\n      connection.writePacket(EmptyPacket);\n    };\n    const onError = err => {\n      this._localStreamError = err;\n      connection.removeListener('error', onConnectionError);\n      connection.writePacket(EmptyPacket);\n    };\n    this._unpipeStream = () => {\n      connection.stream.removeListener('pause', onPause);\n      connection.stream.removeListener('drain', onDrain);\n      this._localStream.removeListener('data', onData);\n      this._localStream.removeListener('end', onEnd);\n      this._localStream.removeListener('error', onError);\n    };\n    connection.stream.on('pause', onPause);\n    connection.stream.on('drain', onDrain);\n    this._localStream.on('data', onData);\n    this._localStream.on('end', onEnd);\n    this._localStream.on('error', onError);\n    connection.once('error', onConnectionError);\n    return this.infileOk;\n  }\n\n  readField(packet, connection) {\n    this._receivedFieldsCount++;\n    // Often there is much more data in the column definition than in the row itself\n    // If you set manually _fields[0] to array of ColumnDefinition's (from previous call)\n    // you can 'cache' result of parsing. Field packets still received, but ignored in that case\n    // this is the reason _receivedFieldsCount exist (otherwise we could just use current length of fields array)\n    if (this._fields[this._resultIndex].length !== this._fieldCount) {\n      const field = new Packets.ColumnDefinition(\n        packet,\n        connection.clientEncoding\n      );\n      this._fields[this._resultIndex].push(field);\n      if (connection.config.debug) {\n        /* eslint-disable no-console */\n        console.log('        Column definition:');\n        console.log(`          name: ${field.name}`);\n        console.log(`          type: ${field.columnType}`);\n        console.log(`         flags: ${field.flags}`);\n        /* eslint-enable no-console */\n      }\n    }\n    // last field received\n    if (this._receivedFieldsCount === this._fieldCount) {\n      const fields = this._fields[this._resultIndex];\n      this.emit('fields', fields);\n      this._rowParser = new (getTextParser(fields, this.options, connection.config))(fields);\n      return Query.prototype.fieldsEOF;\n    }\n    return Query.prototype.readField;\n  }\n\n  fieldsEOF(packet, connection) {\n    // check EOF\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet');\n    }\n    return this.row;\n  }\n\n  /* eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }] */\n  row(packet, _connection) { \n    if (packet.isEOF()) {\n      const status = packet.eofStatusFlags();\n      const moreResults = status & ServerStatus.SERVER_MORE_RESULTS_EXISTS;\n      if (moreResults) {\n        this._resultIndex++;\n        return Query.prototype.resultsetHeader;\n      }\n      return this.done();\n    }\n    let row;\n    try {\n      row = this._rowParser.next(\n        packet,\n        this._fields[this._resultIndex],\n        this.options\n      );\n    } catch (err) {\n      this._localStreamError = err;\n      return this.doneInsert(null);\n    }\n    if (this.onResult) {\n      this._rows[this._resultIndex].push(row);\n    } else {\n      this.emit('result', row);\n    }\n    return Query.prototype.row;\n  }\n\n  infileOk(packet, connection) {\n    const rs = new Packets.ResultSetHeader(packet, connection);\n    return this.doneInsert(rs);\n  }\n\n  stream(options) {\n    options = options || {};\n    options.objectMode = true;\n    const stream = new Readable(options);\n    stream._read = () => {\n      this._connection && this._connection.resume();\n    };\n    this.on('result', row => {\n      if (!stream.push(row)) {\n        this._connection.pause();\n      }\n      stream.emit('result', row); // replicate old emitter\n    });\n    this.on('error', err => {\n      stream.emit('error', err); // Pass on any errors\n    });\n    this.on('end', () => {\n      stream.push(null); // pushing null, indicating EOF\n      stream.emit('close'); // notify readers that query has completed\n    });\n    this.on('fields', fields => {\n      stream.emit('fields', fields); // replicate old emitter\n    });\n    return stream;\n  }\n\n  _setTimeout() {\n    if (this.timeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.queryTimeout = Timers.setTimeout(\n        timeoutHandler,\n        this.timeout\n      );\n    }\n  }\n\n  _handleTimeoutError() {\n    if (this.queryTimeout) {\n      Timers.clearTimeout(this.queryTimeout);\n      this.queryTimeout = null;\n    }\n    \n    const err = new Error('Query inactivity timeout');\n    err.errorno = 'PROTOCOL_SEQUENCE_TIMEOUT';\n    err.code = 'PROTOCOL_SEQUENCE_TIMEOUT';\n    err.syscall = 'query';\n\n    if (this.onResult) {\n      this.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n  }\n}\n\nQuery.prototype.catch = Query.prototype.then;\n\nmodule.exports = Query;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}