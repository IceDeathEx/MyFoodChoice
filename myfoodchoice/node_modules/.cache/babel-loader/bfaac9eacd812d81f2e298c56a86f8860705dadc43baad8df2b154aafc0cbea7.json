{"ast":null,"code":"// This file was modified by Oracle on June 1, 2021.\n// The changes involve new logic to handle an additional ERR Packet sent by\n// the MySQL server when the connection is closed unexpectedly.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n// This file was modified by Oracle on June 17, 2021.\n// The changes involve logic to ensure the socket connection is closed when\n// there is a fatal error.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n// This file was modified by Oracle on September 21, 2021.\n// The changes involve passing additional authentication factor passwords\n// to the ChangeUser Command instance.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst Net = require('net');\nconst Tls = require('tls');\nconst Timers = require('timers');\nconst EventEmitter = require('events').EventEmitter;\nconst Readable = require('stream').Readable;\nconst Queue = require('denque');\nconst SqlString = require('sqlstring');\nconst LRU = require('lru-cache').default;\nconst PacketParser = require('./packet_parser.js');\nconst Packets = require('./packets/index.js');\nconst Commands = require('./commands/index.js');\nconst ConnectionConfig = require('./connection_config.js');\nconst CharsetToEncoding = require('./constants/charset_encodings.js');\nlet _connectionId = 0;\nlet convertNamedPlaceholders = null;\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.config = opts.config;\n    // TODO: fill defaults\n    // if no params, connect to /var/lib/mysql/mysql.sock ( /tmp/mysql.sock on OSX )\n    // if host is given, connect to host:3306\n    // TODO: use `/usr/local/mysql/bin/mysql_config --socket` output? as default socketPath\n    // if there is no host/port and no socketPath parameters?\n    if (!opts.config.stream) {\n      if (opts.config.socketPath) {\n        this.stream = Net.connect(opts.config.socketPath);\n      } else {\n        this.stream = Net.connect(opts.config.port, opts.config.host);\n\n        // Optionally enable keep-alive on the socket.\n        if (this.config.enableKeepAlive) {\n          this.stream.on('connect', () => {\n            this.stream.setKeepAlive(true, this.config.keepAliveInitialDelay);\n          });\n        }\n\n        // Enable TCP_NODELAY flag. This is needed so that the network packets\n        // are sent immediately to the server\n        this.stream.setNoDelay(true);\n      }\n      // if stream is a function, treat it as \"stream agent / factory\"\n    } else if (typeof opts.config.stream === 'function') {\n      this.stream = opts.config.stream(opts);\n    } else {\n      this.stream = opts.config.stream;\n    }\n    this._internalId = _connectionId++;\n    this._commands = new Queue();\n    this._command = null;\n    this._paused = false;\n    this._paused_packets = new Queue();\n    this._statements = new LRU({\n      max: this.config.maxPreparedStatements,\n      dispose: function (statement) {\n        statement.close();\n      }\n    });\n    this.serverCapabilityFlags = 0;\n    this.authorized = false;\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n    this.threadId = null;\n    this._handshakePacket = null;\n    this._fatalError = null;\n    this._protocolError = null;\n    this._outOfOrderPackets = [];\n    this.clientEncoding = CharsetToEncoding[this.config.charsetNumber];\n    this.stream.on('error', this._handleNetworkError.bind(this));\n    // see https://gist.github.com/khoomeister/4985691#use-that-instead-of-bind\n    this.packetParser = new PacketParser(p => {\n      this.handlePacket(p);\n    });\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n      this.packetParser.execute(data);\n    });\n    this.stream.on('end', () => {\n      // emit the end event so that the pooled connection can close the connection\n      this.emit('end');\n    });\n    this.stream.on('close', () => {\n      // we need to set this flag everywhere where we want connection to close\n      if (this._closing) {\n        return;\n      }\n      if (!this._protocolError) {\n        // no particular error message before disconnect\n        this._protocolError = new Error('Connection lost: The server closed the connection.');\n        this._protocolError.fatal = true;\n        this._protocolError.code = 'PROTOCOL_CONNECTION_LOST';\n      }\n      this._notifyError(this._protocolError);\n    });\n    let handshakeCommand;\n    if (!this.config.isServer) {\n      handshakeCommand = new Commands.ClientHandshake(this.config.clientFlags);\n      handshakeCommand.on('end', () => {\n        // this happens when handshake finishes early either because there was\n        // some fatal error or the server sent an error packet instead of\n        // an hello packet (for example, 'Too many connections' error)\n        if (!handshakeCommand.handshake || this._fatalError || this._protocolError) {\n          return;\n        }\n        this._handshakePacket = handshakeCommand.handshake;\n        this.threadId = handshakeCommand.handshake.connectionId;\n        this.emit('connect', handshakeCommand.handshake);\n      });\n      handshakeCommand.on('error', err => {\n        this._closing = true;\n        this._notifyError(err);\n      });\n      this.addCommand(handshakeCommand);\n    }\n    // in case there was no initial handshake but we need to read sting, assume it utf-8\n    // most common example: \"Too many connections\" error ( packet is sent immediately on connection attempt, we don't know server encoding yet)\n    // will be overwritten with actual encoding value as soon as server handshake packet is received\n    this.serverEncoding = 'utf8';\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.connectTimeout = Timers.setTimeout(timeoutHandler, this.config.connectTimeout);\n    }\n  }\n  promise(promiseImpl) {\n    const PromiseConnection = require('../promise').PromiseConnection;\n    return new PromiseConnection(this, promiseImpl);\n  }\n  _addCommandClosedState(cmd) {\n    const err = new Error(\"Can't add new command when connection is in closed state\");\n    err.fatal = true;\n    if (cmd.onResult) {\n      cmd.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n  }\n  _handleFatalError(err) {\n    err.fatal = true;\n    // stop receiving packets\n    this.stream.removeAllListeners('data');\n    this.addCommand = this._addCommandClosedState;\n    this.write = () => {\n      this.emit('error', new Error(\"Can't write in closed state\"));\n    };\n    this._notifyError(err);\n    this._fatalError = err;\n  }\n  _handleNetworkError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    // Do not throw an error when a connection ends with a RST,ACK packet\n    if (err.code === 'ECONNRESET' && this._closing) {\n      return;\n    }\n    this._handleFatalError(err);\n  }\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n    this._handleNetworkError(err);\n  }\n\n  // notify all commands in the queue and bubble error as connection \"error\"\n  // called on stream error or unexpected termination\n  _notifyError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    // prevent from emitting 'PROTOCOL_CONNECTION_LOST' after EPIPE or ECONNRESET\n    if (this._fatalError) {\n      return;\n    }\n    let command;\n    // if there is no active command, notify connection\n    // if there are commands and all of them have callbacks, pass error via callback\n    let bubbleErrorToConnection = !this._command;\n    if (this._command && this._command.onResult) {\n      this._command.onResult(err);\n      this._command = null;\n      // connection handshake is special because we allow it to be implicit\n      // if error happened during handshake, but there are others commands in queue\n      // then bubble error to other commands and not to connection\n    } else if (!(this._command && this._command.constructor === Commands.ClientHandshake && this._commands.length > 0)) {\n      bubbleErrorToConnection = true;\n    }\n    while (command = this._commands.shift()) {\n      if (command.onResult) {\n        command.onResult(err);\n      } else {\n        bubbleErrorToConnection = true;\n      }\n    }\n    // notify connection if some comands in the queue did not have callbacks\n    // or if this is pool connection ( so it can be removed from pool )\n    if (bubbleErrorToConnection || this._pool) {\n      this.emit('error', err);\n    }\n    // close connection after emitting the event in case of a fatal error\n    if (err.fatal) {\n      this.close();\n    }\n  }\n  write(buffer) {\n    const result = this.stream.write(buffer, err => {\n      if (err) {\n        this._handleNetworkError(err);\n      }\n    });\n    if (!result) {\n      this.stream.emit('pause');\n    }\n  }\n\n  // http://dev.mysql.com/doc/internals/en/sequence-id.html\n  //\n  // The sequence-id is incremented with each packet and may wrap around.\n  // It starts at 0 and is reset to 0 when a new command\n  // begins in the Command Phase.\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n  _resetSequenceId() {\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n  }\n  _bumpCompressedSequenceId(numPackets) {\n    this.compressedSequenceId += numPackets;\n    this.compressedSequenceId %= 256;\n  }\n  _bumpSequenceId(numPackets) {\n    this.sequenceId += numPackets;\n    this.sequenceId %= 256;\n  }\n  writePacket(packet) {\n    const MAX_PACKET_LENGTH = 16777215;\n    const length = packet.length();\n    let chunk, offset, header;\n    if (length < MAX_PACKET_LENGTH) {\n      packet.writeHeader(this.sequenceId);\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(`${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`);\n        // eslint-disable-next-line no-console\n        console.log(`${this._internalId} ${this.connectionId} <== ${packet.buffer.toString('hex')}`);\n      }\n      this._bumpSequenceId(1);\n      this.write(packet.buffer);\n    } else {\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(`${this._internalId} ${this.connectionId} <== Writing large packet, raw content not written:`);\n        // eslint-disable-next-line no-console\n        console.log(`${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`);\n      }\n      for (offset = 4; offset < 4 + length; offset += MAX_PACKET_LENGTH) {\n        chunk = packet.buffer.slice(offset, offset + MAX_PACKET_LENGTH);\n        if (chunk.length === MAX_PACKET_LENGTH) {\n          header = Buffer.from([0xff, 0xff, 0xff, this.sequenceId]);\n        } else {\n          header = Buffer.from([chunk.length & 0xff, chunk.length >> 8 & 0xff, chunk.length >> 16 & 0xff, this.sequenceId]);\n        }\n        this._bumpSequenceId(1);\n        this.write(header);\n        this.write(chunk);\n      }\n    }\n  }\n\n  // 0.11+ environment\n  startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n    const secureContext = Tls.createSecureContext({\n      ca: this.config.ssl.ca,\n      cert: this.config.ssl.cert,\n      ciphers: this.config.ssl.ciphers,\n      key: this.config.ssl.key,\n      passphrase: this.config.ssl.passphrase,\n      minVersion: this.config.ssl.minVersion,\n      maxVersion: this.config.ssl.maxVersion\n    });\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    const verifyIdentity = this.config.ssl.verifyIdentity;\n    const servername = this.config.host;\n    let secureEstablished = false;\n    this.stream.removeAllListeners('data');\n    const secureSocket = Tls.connect({\n      rejectUnauthorized,\n      requestCert: rejectUnauthorized,\n      secureContext,\n      isServer: false,\n      socket: this.stream,\n      servername\n    }, () => {\n      secureEstablished = true;\n      if (rejectUnauthorized) {\n        if (typeof servername === 'string' && verifyIdentity) {\n          const cert = secureSocket.getPeerCertificate(true);\n          const serverIdentityCheckError = Tls.checkServerIdentity(servername, cert);\n          if (serverIdentityCheckError) {\n            onSecure(serverIdentityCheckError);\n            return;\n          }\n        }\n      }\n      onSecure();\n    });\n    // error handler for secure socket\n    secureSocket.on('error', err => {\n      if (secureEstablished) {\n        this._handleNetworkError(err);\n      } else {\n        onSecure(err);\n      }\n    });\n    secureSocket.on('data', data => {\n      this.packetParser.execute(data);\n    });\n    this.write = buffer => secureSocket.write(buffer);\n  }\n  protocolError(message, code) {\n    // Starting with MySQL 8.0.24, if the client closes the connection\n    // unexpectedly, the server will send a last ERR Packet, which we can\n    // safely ignore.\n    // https://dev.mysql.com/worklog/task/?id=12999\n    if (this._closing) {\n      return;\n    }\n    const err = new Error(message);\n    err.fatal = true;\n    err.code = code || 'PROTOCOL_ERROR';\n    this.emit('error', err);\n  }\n  get fatalError() {\n    return this._fatalError;\n  }\n  handlePacket(packet) {\n    if (this._paused) {\n      this._paused_packets.push(packet);\n      return;\n    }\n    if (this.config.debug) {\n      if (packet) {\n        // eslint-disable-next-line no-console\n        console.log(` raw: ${packet.buffer.slice(packet.offset, packet.offset + packet.length()).toString('hex')}`);\n        // eslint-disable-next-line no-console\n        console.trace();\n        const commandName = this._command ? this._command._commandName : '(no command)';\n        const stateName = this._command ? this._command.stateName() : '(no command)';\n        // eslint-disable-next-line no-console\n        console.log(`${this._internalId} ${this.connectionId} ==> ${commandName}#${stateName}(${[packet.sequenceId, packet.type(), packet.length()].join(',')})`);\n      }\n    }\n    if (!this._command) {\n      const marker = packet.peekByte();\n      // If it's an Err Packet, we should use it.\n      if (marker === 0xff) {\n        const error = Packets.Error.fromPacket(packet);\n        this.protocolError(error.message, error.code);\n      } else {\n        // Otherwise, it means it's some other unexpected packet.\n        this.protocolError('Unexpected packet while no commands in the queue', 'PROTOCOL_UNEXPECTED_PACKET');\n      }\n      this.close();\n      return;\n    }\n    if (packet) {\n      // Note: when server closes connection due to inactivity, Err packet ER_CLIENT_INTERACTION_TIMEOUT from MySQL 8.0.24, sequenceId will be 0\n      if (this.sequenceId !== packet.sequenceId) {\n        const err = new Error(`Warning: got packets out of order. Expected ${this.sequenceId} but received ${packet.sequenceId}`);\n        err.expected = this.sequenceId;\n        err.received = packet.sequenceId;\n        this.emit('warn', err); // REVIEW\n        // eslint-disable-next-line no-console\n        console.error(err.message);\n      }\n      this._bumpSequenceId(packet.numPackets);\n    }\n    try {\n      if (this._fatalError) {\n        // skip remaining packets after client is in the error state\n        return;\n      }\n      const done = this._command.execute(packet, this);\n      if (done) {\n        this._command = this._commands.shift();\n        if (this._command) {\n          this.sequenceId = 0;\n          this.compressedSequenceId = 0;\n          this.handlePacket();\n        }\n      }\n    } catch (err) {\n      this._handleFatalError(err);\n      this.stream.destroy();\n    }\n  }\n  addCommand(cmd) {\n    // this.compressedSequenceId = 0;\n    // this.sequenceId = 0;\n    if (this.config.debug) {\n      const commandName = cmd.constructor.name;\n      // eslint-disable-next-line no-console\n      console.log(`Add command: ${commandName}`);\n      cmd._commandName = commandName;\n    }\n    if (!this._command) {\n      this._command = cmd;\n      this.handlePacket();\n    } else {\n      this._commands.push(cmd);\n    }\n    return cmd;\n  }\n  format(sql, values) {\n    if (typeof this.config.queryFormat === 'function') {\n      return this.config.queryFormat.call(this, sql, values, this.config.timezone);\n    }\n    const opts = {\n      sql: sql,\n      values: values\n    };\n    this._resolveNamedPlaceholders(opts);\n    return SqlString.format(opts.sql, opts.values, this.config.stringifyObjects, this.config.timezone);\n  }\n  escape(value) {\n    return SqlString.escape(value, false, this.config.timezone);\n  }\n  escapeId(value) {\n    return SqlString.escapeId(value, false);\n  }\n  raw(sql) {\n    return SqlString.raw(sql);\n  }\n  _resolveNamedPlaceholders(options) {\n    let unnamed;\n    if (this.config.namedPlaceholders || options.namedPlaceholders) {\n      if (Array.isArray(options.values)) {\n        // if an array is provided as the values, assume the conversion is not necessary.\n        // this allows the usage of unnamed placeholders even if the namedPlaceholders flag is enabled.\n        return;\n      }\n      if (convertNamedPlaceholders === null) {\n        convertNamedPlaceholders = require('named-placeholders')();\n      }\n      unnamed = convertNamedPlaceholders(options.sql, options.values);\n      options.sql = unnamed[0];\n      options.values = unnamed[1];\n    }\n  }\n  query(sql, values, cb) {\n    let cmdQuery;\n    if (sql.constructor === Commands.Query) {\n      cmdQuery = sql;\n    } else {\n      cmdQuery = Connection.createQuery(sql, values, cb, this.config);\n    }\n    this._resolveNamedPlaceholders(cmdQuery);\n    const rawSql = this.format(cmdQuery.sql, cmdQuery.values !== undefined ? cmdQuery.values : []);\n    cmdQuery.sql = rawSql;\n    return this.addCommand(cmdQuery);\n  }\n  pause() {\n    this._paused = true;\n    this.stream.pause();\n  }\n  resume() {\n    let packet;\n    this._paused = false;\n    while (packet = this._paused_packets.shift()) {\n      this.handlePacket(packet);\n      // don't resume if packet handler paused connection\n      if (this._paused) {\n        return;\n      }\n    }\n    this.stream.resume();\n  }\n\n  // TODO: named placeholders support\n  prepare(options, cb) {\n    if (typeof options === 'string') {\n      options = {\n        sql: options\n      };\n    }\n    return this.addCommand(new Commands.Prepare(options, cb));\n  }\n  unprepare(sql) {\n    let options = {};\n    if (typeof sql === 'object') {\n      options = sql;\n    } else {\n      options.sql = sql;\n    }\n    const key = Connection.statementKey(options);\n    const stmt = this._statements.get(key);\n    if (stmt) {\n      this._statements.delete(key);\n      stmt.close();\n    }\n    return stmt;\n  }\n  execute(sql, values, cb) {\n    let options = {\n      infileStreamFactory: this.config.infileStreamFactory\n    };\n    if (typeof sql === 'object') {\n      // execute(options, cb)\n      options = {\n        ...options,\n        ...sql\n      };\n      if (typeof values === 'function') {\n        cb = values;\n      } else {\n        options.values = options.values || values;\n      }\n    } else if (typeof values === 'function') {\n      // execute(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // execute(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n    this._resolveNamedPlaceholders(options);\n    // check for values containing undefined\n    if (options.values) {\n      //If namedPlaceholder is not enabled and object is passed as bind parameters\n      if (!Array.isArray(options.values)) {\n        throw new TypeError('Bind parameters must be array if namedPlaceholders parameter is not enabled');\n      }\n      options.values.forEach(val => {\n        //If namedPlaceholder is not enabled and object is passed as bind parameters\n        if (!Array.isArray(options.values)) {\n          throw new TypeError('Bind parameters must be array if namedPlaceholders parameter is not enabled');\n        }\n        if (val === undefined) {\n          throw new TypeError('Bind parameters must not contain undefined. To pass SQL NULL specify JS null');\n        }\n        if (typeof val === 'function') {\n          throw new TypeError('Bind parameters must not contain function(s). To pass the body of a function as a string call .toString() first');\n        }\n      });\n    }\n    const executeCommand = new Commands.Execute(options, cb);\n    const prepareCommand = new Commands.Prepare(options, (err, stmt) => {\n      if (err) {\n        // skip execute command if prepare failed, we have main\n        // combined callback here\n        executeCommand.start = function () {\n          return null;\n        };\n        if (cb) {\n          cb(err);\n        } else {\n          executeCommand.emit('error', err);\n        }\n        executeCommand.emit('end');\n        return;\n      }\n      executeCommand.statement = stmt;\n    });\n    this.addCommand(prepareCommand);\n    this.addCommand(executeCommand);\n    return executeCommand;\n  }\n  changeUser(options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    const charsetNumber = options.charset ? ConnectionConfig.getCharsetNumber(options.charset) : this.config.charsetNumber;\n    return this.addCommand(new Commands.ChangeUser({\n      user: options.user || this.config.user,\n      // for the purpose of multi-factor authentication, or not, the main\n      // password (used for the 1st authentication factor) can also be\n      // provided via the \"password1\" option\n      password: options.password || options.password1 || this.config.password || this.config.password1,\n      password2: options.password2 || this.config.password2,\n      password3: options.password3 || this.config.password3,\n      passwordSha1: options.passwordSha1 || this.config.passwordSha1,\n      database: options.database || this.config.database,\n      timeout: options.timeout,\n      charsetNumber: charsetNumber,\n      currentConfig: this.config\n    }, err => {\n      if (err) {\n        err.fatal = true;\n      }\n      if (callback) {\n        callback(err);\n      }\n    }));\n  }\n\n  // transaction helpers\n  beginTransaction(cb) {\n    return this.query('START TRANSACTION', cb);\n  }\n  commit(cb) {\n    return this.query('COMMIT', cb);\n  }\n  rollback(cb) {\n    return this.query('ROLLBACK', cb);\n  }\n  ping(cb) {\n    return this.addCommand(new Commands.Ping(cb));\n  }\n  _registerSlave(opts, cb) {\n    return this.addCommand(new Commands.RegisterSlave(opts, cb));\n  }\n  _binlogDump(opts, cb) {\n    return this.addCommand(new Commands.BinlogDump(opts, cb));\n  }\n\n  // currently just alias to close\n  destroy() {\n    this.close();\n  }\n  close() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this._closing = true;\n    this.stream.end();\n    this.addCommand = this._addCommandClosedState;\n  }\n  createBinlogStream(opts) {\n    // TODO: create proper stream class\n    // TODO: use through2\n    let test = 1;\n    const stream = new Readable({\n      objectMode: true\n    });\n    stream._read = function () {\n      return {\n        data: test++\n      };\n    };\n    this._registerSlave(opts, () => {\n      const dumpCmd = this._binlogDump(opts);\n      dumpCmd.on('event', ev => {\n        stream.push(ev);\n      });\n      dumpCmd.on('eof', () => {\n        stream.push(null);\n        // if non-blocking, then close stream to prevent errors\n        if (opts.flags && opts.flags & 0x01) {\n          this.close();\n        }\n      });\n      // TODO: pipe errors as well\n    });\n\n    return stream;\n  }\n  connect(cb) {\n    if (!cb) {\n      return;\n    }\n    if (this._fatalError || this._protocolError) {\n      return cb(this._fatalError || this._protocolError);\n    }\n    if (this._handshakePacket) {\n      return cb(null, this);\n    }\n    let connectCalled = 0;\n    function callbackOnce(isErrorHandler) {\n      return function (param) {\n        if (!connectCalled) {\n          if (isErrorHandler) {\n            cb(param);\n          } else {\n            cb(null, param);\n          }\n        }\n        connectCalled = 1;\n      };\n    }\n    this.once('error', callbackOnce(true));\n    this.once('connect', callbackOnce(false));\n  }\n\n  // ===================================\n  // outgoing server connection methods\n  // ===================================\n  writeColumns(columns) {\n    this.writePacket(Packets.ResultSetHeader.toPacket(columns.length));\n    columns.forEach(column => {\n      this.writePacket(Packets.ColumnDefinition.toPacket(column, this.serverConfig.encoding));\n    });\n    this.writeEof();\n  }\n\n  // row is array of columns, not hash\n  writeTextRow(column) {\n    this.writePacket(Packets.TextRow.toPacket(column, this.serverConfig.encoding));\n  }\n  writeBinaryRow(column) {\n    this.writePacket(Packets.BinaryRow.toPacket(column, this.serverConfig.encoding));\n  }\n  writeTextResult(rows, columns, binary = false) {\n    this.writeColumns(columns);\n    rows.forEach(row => {\n      const arrayRow = new Array(columns.length);\n      columns.forEach(column => {\n        arrayRow.push(row[column.name]);\n      });\n      if (binary) {\n        this.writeBinaryRow(arrayRow);\n      } else this.writeTextRow(arrayRow);\n    });\n    this.writeEof();\n  }\n  writeEof(warnings, statusFlags) {\n    this.writePacket(Packets.EOF.toPacket(warnings, statusFlags));\n  }\n  writeOk(args) {\n    if (!args) {\n      args = {\n        affectedRows: 0\n      };\n    }\n    this.writePacket(Packets.OK.toPacket(args, this.serverConfig.encoding));\n  }\n  writeError(args) {\n    // if we want to send error before initial hello was sent, use default encoding\n    const encoding = this.serverConfig ? this.serverConfig.encoding : 'cesu8';\n    this.writePacket(Packets.Error.toPacket(args, encoding));\n  }\n  serverHandshake(args) {\n    this.serverConfig = args;\n    this.serverConfig.encoding = CharsetToEncoding[this.serverConfig.characterSet];\n    return this.addCommand(new Commands.ServerHandshake(args));\n  }\n\n  // ===============================================================\n  end(callback) {\n    if (this.config.isServer) {\n      this._closing = true;\n      const quitCmd = new EventEmitter();\n      setImmediate(() => {\n        this.stream.end();\n        quitCmd.emit('end');\n      });\n      return quitCmd;\n    }\n    // trigger error if more commands enqueued after end command\n    const quitCmd = this.addCommand(new Commands.Quit(callback));\n    this.addCommand = this._addCommandClosedState;\n    return quitCmd;\n  }\n  static createQuery(sql, values, cb, config) {\n    let options = {\n      rowsAsArray: config.rowsAsArray,\n      infileStreamFactory: config.infileStreamFactory\n    };\n    if (typeof sql === 'object') {\n      // query(options, cb)\n      options = {\n        ...options,\n        ...sql\n      };\n      if (typeof values === 'function') {\n        cb = values;\n      } else if (values !== undefined) {\n        options.values = values;\n      }\n    } else if (typeof values === 'function') {\n      // query(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // query(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n    return new Commands.Query(options, cb);\n  }\n  static statementKey(options) {\n    return `${typeof options.nestTables}/${options.nestTables}/${options.rowsAsArray}${options.sql}`;\n  }\n}\nmodule.exports = Connection;","map":{"version":3,"names":["Net","require","Tls","Timers","EventEmitter","Readable","Queue","SqlString","LRU","default","PacketParser","Packets","Commands","ConnectionConfig","CharsetToEncoding","_connectionId","convertNamedPlaceholders","Connection","constructor","opts","config","stream","socketPath","connect","port","host","enableKeepAlive","on","setKeepAlive","keepAliveInitialDelay","setNoDelay","_internalId","_commands","_command","_paused","_paused_packets","_statements","max","maxPreparedStatements","dispose","statement","close","serverCapabilityFlags","authorized","sequenceId","compressedSequenceId","threadId","_handshakePacket","_fatalError","_protocolError","_outOfOrderPackets","clientEncoding","charsetNumber","_handleNetworkError","bind","packetParser","p","handlePacket","data","connectTimeout","clearTimeout","execute","emit","_closing","Error","fatal","code","_notifyError","handshakeCommand","isServer","ClientHandshake","clientFlags","handshake","connectionId","err","addCommand","serverEncoding","timeoutHandler","_handleTimeoutError","setTimeout","promise","promiseImpl","PromiseConnection","_addCommandClosedState","cmd","onResult","_handleFatalError","removeAllListeners","write","destroy","errorno","syscall","command","bubbleErrorToConnection","length","shift","_pool","buffer","result","_resetSequenceId","_bumpCompressedSequenceId","numPackets","_bumpSequenceId","writePacket","packet","MAX_PACKET_LENGTH","chunk","offset","header","writeHeader","debug","console","log","_commandName","stateName","_name","join","toString","slice","Buffer","from","startTLS","onSecure","secureContext","createSecureContext","ca","ssl","cert","ciphers","key","passphrase","minVersion","maxVersion","rejectUnauthorized","verifyIdentity","servername","secureEstablished","secureSocket","requestCert","socket","getPeerCertificate","serverIdentityCheckError","checkServerIdentity","protocolError","message","fatalError","push","trace","commandName","type","marker","peekByte","error","fromPacket","expected","received","done","name","format","sql","values","queryFormat","call","timezone","_resolveNamedPlaceholders","stringifyObjects","escape","value","escapeId","raw","options","unnamed","namedPlaceholders","Array","isArray","query","cb","cmdQuery","Query","createQuery","rawSql","undefined","pause","resume","prepare","Prepare","unprepare","statementKey","stmt","get","delete","infileStreamFactory","TypeError","forEach","val","executeCommand","Execute","prepareCommand","start","changeUser","callback","charset","getCharsetNumber","ChangeUser","user","password","password1","password2","password3","passwordSha1","database","timeout","currentConfig","beginTransaction","commit","rollback","ping","Ping","_registerSlave","RegisterSlave","_binlogDump","BinlogDump","end","createBinlogStream","test","objectMode","_read","dumpCmd","ev","flags","connectCalled","callbackOnce","isErrorHandler","param","once","writeColumns","columns","ResultSetHeader","toPacket","column","ColumnDefinition","serverConfig","encoding","writeEof","writeTextRow","TextRow","writeBinaryRow","BinaryRow","writeTextResult","rows","binary","row","arrayRow","warnings","statusFlags","EOF","writeOk","args","affectedRows","OK","writeError","serverHandshake","characterSet","ServerHandshake","quitCmd","setImmediate","Quit","rowsAsArray","nestTables","module","exports"],"sources":["D:/UOW_FYP/FYP1/myfoodchoice/node_modules/mysql2/lib/connection.js"],"sourcesContent":["// This file was modified by Oracle on June 1, 2021.\n// The changes involve new logic to handle an additional ERR Packet sent by\n// the MySQL server when the connection is closed unexpectedly.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n// This file was modified by Oracle on June 17, 2021.\n// The changes involve logic to ensure the socket connection is closed when\n// there is a fatal error.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n// This file was modified by Oracle on September 21, 2021.\n// The changes involve passing additional authentication factor passwords\n// to the ChangeUser Command instance.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst Net = require('net');\nconst Tls = require('tls');\nconst Timers = require('timers');\nconst EventEmitter = require('events').EventEmitter;\nconst Readable = require('stream').Readable;\nconst Queue = require('denque');\nconst SqlString = require('sqlstring');\nconst LRU = require('lru-cache').default;\n\nconst PacketParser = require('./packet_parser.js');\nconst Packets = require('./packets/index.js');\nconst Commands = require('./commands/index.js');\nconst ConnectionConfig = require('./connection_config.js');\nconst CharsetToEncoding = require('./constants/charset_encodings.js');\n\nlet _connectionId = 0;\n\nlet convertNamedPlaceholders = null;\n\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.config = opts.config;\n    // TODO: fill defaults\n    // if no params, connect to /var/lib/mysql/mysql.sock ( /tmp/mysql.sock on OSX )\n    // if host is given, connect to host:3306\n    // TODO: use `/usr/local/mysql/bin/mysql_config --socket` output? as default socketPath\n    // if there is no host/port and no socketPath parameters?\n    if (!opts.config.stream) {\n      if (opts.config.socketPath) {\n        this.stream = Net.connect(opts.config.socketPath);\n      } else {\n        this.stream = Net.connect(\n          opts.config.port,\n          opts.config.host\n        );\n\n        // Optionally enable keep-alive on the socket.\n        if (this.config.enableKeepAlive) {\n          this.stream.on('connect', () => {\n            this.stream.setKeepAlive(true, this.config.keepAliveInitialDelay);\n          });\n        }\n\n        // Enable TCP_NODELAY flag. This is needed so that the network packets\n        // are sent immediately to the server\n        this.stream.setNoDelay(true);\n      }\n      // if stream is a function, treat it as \"stream agent / factory\"\n    } else if (typeof opts.config.stream === 'function')  {\n      this.stream = opts.config.stream(opts);\n    } else {\n      this.stream = opts.config.stream;\n    }\n\n    this._internalId = _connectionId++;\n    this._commands = new Queue();\n    this._command = null;\n    this._paused = false;\n    this._paused_packets = new Queue();\n    this._statements = new LRU({\n      max: this.config.maxPreparedStatements,\n      dispose: function(statement) {\n        statement.close();\n      }\n    });\n    this.serverCapabilityFlags = 0;\n    this.authorized = false;\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n    this.threadId = null;\n    this._handshakePacket = null;\n    this._fatalError = null;\n    this._protocolError = null;\n    this._outOfOrderPackets = [];\n    this.clientEncoding = CharsetToEncoding[this.config.charsetNumber];\n    this.stream.on('error', this._handleNetworkError.bind(this));\n    // see https://gist.github.com/khoomeister/4985691#use-that-instead-of-bind\n    this.packetParser = new PacketParser(p => {\n      this.handlePacket(p);\n    });\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n      this.packetParser.execute(data);\n    });\n    this.stream.on('end', () => {\n      // emit the end event so that the pooled connection can close the connection\n      this.emit('end');\n    });\n    this.stream.on('close', () => {\n      // we need to set this flag everywhere where we want connection to close\n      if (this._closing) {\n        return;\n      }\n      if (!this._protocolError) {\n        // no particular error message before disconnect\n        this._protocolError = new Error(\n          'Connection lost: The server closed the connection.'\n        );\n        this._protocolError.fatal = true;\n        this._protocolError.code = 'PROTOCOL_CONNECTION_LOST';\n      }\n      this._notifyError(this._protocolError);\n    });\n    let handshakeCommand;\n    if (!this.config.isServer) {\n      handshakeCommand = new Commands.ClientHandshake(this.config.clientFlags);\n      handshakeCommand.on('end', () => {\n        // this happens when handshake finishes early either because there was\n        // some fatal error or the server sent an error packet instead of\n        // an hello packet (for example, 'Too many connections' error)\n        if (!handshakeCommand.handshake || this._fatalError || this._protocolError) {\n          return;\n        }\n        this._handshakePacket = handshakeCommand.handshake;\n        this.threadId = handshakeCommand.handshake.connectionId;\n        this.emit('connect', handshakeCommand.handshake);\n      });\n      handshakeCommand.on('error', err => {\n        this._closing = true;\n        this._notifyError(err);\n      });\n      this.addCommand(handshakeCommand);\n    }\n    // in case there was no initial handshake but we need to read sting, assume it utf-8\n    // most common example: \"Too many connections\" error ( packet is sent immediately on connection attempt, we don't know server encoding yet)\n    // will be overwritten with actual encoding value as soon as server handshake packet is received\n    this.serverEncoding = 'utf8';\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.connectTimeout = Timers.setTimeout(\n        timeoutHandler,\n        this.config.connectTimeout\n      );\n    }\n  }\n\n  promise(promiseImpl) {\n    const PromiseConnection = require('../promise').PromiseConnection;\n    return new PromiseConnection(this, promiseImpl);\n  }\n\n  _addCommandClosedState(cmd) {\n    const err = new Error(\n      \"Can't add new command when connection is in closed state\"\n    );\n    err.fatal = true;\n    if (cmd.onResult) {\n      cmd.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n  }\n\n  _handleFatalError(err) {\n    err.fatal = true;\n    // stop receiving packets\n    this.stream.removeAllListeners('data');\n    this.addCommand = this._addCommandClosedState;\n    this.write = () => {\n      this.emit('error', new Error(\"Can't write in closed state\"));\n    };\n    this._notifyError(err);\n    this._fatalError = err;\n  }\n\n  _handleNetworkError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    // Do not throw an error when a connection ends with a RST,ACK packet\n    if (err.code === 'ECONNRESET' && this._closing) {\n      return;\n    }\n    this._handleFatalError(err);\n  }\n\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n    this._handleNetworkError(err);\n  }\n\n  // notify all commands in the queue and bubble error as connection \"error\"\n  // called on stream error or unexpected termination\n  _notifyError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    // prevent from emitting 'PROTOCOL_CONNECTION_LOST' after EPIPE or ECONNRESET\n    if (this._fatalError) {\n      return;\n    }\n    let command;\n    // if there is no active command, notify connection\n    // if there are commands and all of them have callbacks, pass error via callback\n    let bubbleErrorToConnection = !this._command;\n    if (this._command && this._command.onResult) {\n      this._command.onResult(err);\n      this._command = null;\n      // connection handshake is special because we allow it to be implicit\n      // if error happened during handshake, but there are others commands in queue\n      // then bubble error to other commands and not to connection\n    } else if (\n      !(\n        this._command &&\n        this._command.constructor === Commands.ClientHandshake &&\n        this._commands.length > 0\n      )\n    ) {\n      bubbleErrorToConnection = true;\n    }\n    while ((command = this._commands.shift())) {\n      if (command.onResult) {\n        command.onResult(err);\n      } else {\n        bubbleErrorToConnection = true;\n      }\n    }\n    // notify connection if some comands in the queue did not have callbacks\n    // or if this is pool connection ( so it can be removed from pool )\n    if (bubbleErrorToConnection || this._pool) {\n      this.emit('error', err);\n    }\n    // close connection after emitting the event in case of a fatal error\n    if (err.fatal) {\n      this.close();\n    }\n  }\n\n  write(buffer) {\n    const result = this.stream.write(buffer, err => {\n      if (err) {\n        this._handleNetworkError(err);\n      }\n    });\n\n    if (!result) {\n      this.stream.emit('pause');\n    }\n  }\n\n  // http://dev.mysql.com/doc/internals/en/sequence-id.html\n  //\n  // The sequence-id is incremented with each packet and may wrap around.\n  // It starts at 0 and is reset to 0 when a new command\n  // begins in the Command Phase.\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n  _resetSequenceId() {\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n  }\n\n  _bumpCompressedSequenceId(numPackets) {\n    this.compressedSequenceId += numPackets;\n    this.compressedSequenceId %= 256;\n  }\n\n  _bumpSequenceId(numPackets) {\n    this.sequenceId += numPackets;\n    this.sequenceId %= 256;\n  }\n\n  writePacket(packet) {\n    const MAX_PACKET_LENGTH = 16777215;\n    const length = packet.length();\n    let chunk, offset, header;\n    if (length < MAX_PACKET_LENGTH) {\n      packet.writeHeader(this.sequenceId);\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`\n        );\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${packet.buffer.toString('hex')}`\n        );\n      }\n      this._bumpSequenceId(1);\n      this.write(packet.buffer);\n    } else {\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== Writing large packet, raw content not written:`\n        );\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`\n        );\n      }\n      for (offset = 4; offset < 4 + length; offset += MAX_PACKET_LENGTH) {\n        chunk = packet.buffer.slice(offset, offset + MAX_PACKET_LENGTH);\n        if (chunk.length === MAX_PACKET_LENGTH) {\n          header = Buffer.from([0xff, 0xff, 0xff, this.sequenceId]);\n        } else {\n          header = Buffer.from([\n            chunk.length & 0xff,\n            (chunk.length >> 8) & 0xff,\n            (chunk.length >> 16) & 0xff,\n            this.sequenceId\n          ]);\n        }\n        this._bumpSequenceId(1);\n        this.write(header);\n        this.write(chunk);\n      }\n    }\n  }\n\n  // 0.11+ environment\n  startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n    const secureContext = Tls.createSecureContext({\n      ca: this.config.ssl.ca,\n      cert: this.config.ssl.cert,\n      ciphers: this.config.ssl.ciphers,\n      key: this.config.ssl.key,\n      passphrase: this.config.ssl.passphrase,\n      minVersion: this.config.ssl.minVersion,\n      maxVersion: this.config.ssl.maxVersion\n    });\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    const verifyIdentity = this.config.ssl.verifyIdentity;\n    const servername = this.config.host;\n\n    let secureEstablished = false;\n    this.stream.removeAllListeners('data');\n    const secureSocket = Tls.connect({\n      rejectUnauthorized,\n      requestCert: rejectUnauthorized,\n      secureContext,\n      isServer: false,\n      socket: this.stream,\n      servername\n    }, () => {\n      secureEstablished = true;\n      if (rejectUnauthorized) {\n        if (typeof servername === 'string' && verifyIdentity) {\n          const cert = secureSocket.getPeerCertificate(true);\n          const serverIdentityCheckError = Tls.checkServerIdentity(servername, cert);\n          if (serverIdentityCheckError) {\n            onSecure(serverIdentityCheckError);\n            return;\n          }\n        }\n      }\n      onSecure();\n    });\n    // error handler for secure socket\n    secureSocket.on('error', err => {\n      if (secureEstablished) {\n        this._handleNetworkError(err);\n      } else {\n        onSecure(err);\n      }\n    });\n    secureSocket.on('data', data => {\n      this.packetParser.execute(data);\n    });\n    this.write = buffer => secureSocket.write(buffer);\n  }\n\n  protocolError(message, code) {\n    // Starting with MySQL 8.0.24, if the client closes the connection\n    // unexpectedly, the server will send a last ERR Packet, which we can\n    // safely ignore.\n    // https://dev.mysql.com/worklog/task/?id=12999\n    if (this._closing) {\n      return;\n    }\n\n    const err = new Error(message);\n    err.fatal = true;\n    err.code = code || 'PROTOCOL_ERROR';\n    this.emit('error', err);\n  }\n  \n  get fatalError() {\n    return this._fatalError;\n  }\n\n  handlePacket(packet) {\n    if (this._paused) {\n      this._paused_packets.push(packet);\n      return;\n    }\n    if (this.config.debug) {\n      if (packet) {\n        // eslint-disable-next-line no-console\n        console.log(\n          ` raw: ${packet.buffer\n            .slice(packet.offset, packet.offset + packet.length())\n            .toString('hex')}`\n        );\n        // eslint-disable-next-line no-console\n        console.trace();\n        const commandName = this._command\n          ? this._command._commandName\n          : '(no command)';\n        const stateName = this._command\n          ? this._command.stateName()\n          : '(no command)';\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} ==> ${commandName}#${stateName}(${[packet.sequenceId, packet.type(), packet.length()].join(',')})`\n        );\n      }\n    }\n    if (!this._command) {\n      const marker = packet.peekByte();\n      // If it's an Err Packet, we should use it.\n      if (marker === 0xff) {\n        const error = Packets.Error.fromPacket(packet);\n        this.protocolError(error.message, error.code);\n      } else {\n        // Otherwise, it means it's some other unexpected packet.\n        this.protocolError(\n          'Unexpected packet while no commands in the queue',\n          'PROTOCOL_UNEXPECTED_PACKET'\n        );\n      }\n      this.close();\n      return;\n    }\n    if (packet) {\n      // Note: when server closes connection due to inactivity, Err packet ER_CLIENT_INTERACTION_TIMEOUT from MySQL 8.0.24, sequenceId will be 0\n      if (this.sequenceId !== packet.sequenceId) {\n        const err = new Error(\n          `Warning: got packets out of order. Expected ${this.sequenceId} but received ${packet.sequenceId}`\n        );\n        err.expected = this.sequenceId;\n        err.received = packet.sequenceId;\n        this.emit('warn', err); // REVIEW\n        // eslint-disable-next-line no-console\n        console.error(err.message);\n      }\n      this._bumpSequenceId(packet.numPackets);\n    }\n    try {\n      if (this._fatalError) {\n        // skip remaining packets after client is in the error state\n        return;\n      }\n      const done = this._command.execute(packet, this);\n      if (done) {\n        this._command = this._commands.shift();\n        if (this._command) {\n          this.sequenceId = 0;\n          this.compressedSequenceId = 0;\n          this.handlePacket();\n        }\n      }\n    } catch (err) {\n      this._handleFatalError(err);\n      this.stream.destroy();\n    }\n  }\n\n  addCommand(cmd) {\n    // this.compressedSequenceId = 0;\n    // this.sequenceId = 0;\n    if (this.config.debug) {\n      const commandName = cmd.constructor.name;\n      // eslint-disable-next-line no-console\n      console.log(`Add command: ${commandName}`);\n      cmd._commandName = commandName;\n    }\n    if (!this._command) {\n      this._command = cmd;\n      this.handlePacket();\n    } else {\n      this._commands.push(cmd);\n    }\n    return cmd;\n  }\n\n  format(sql, values) {\n    if (typeof this.config.queryFormat === 'function') {\n      return this.config.queryFormat.call(\n        this,\n        sql,\n        values,\n        this.config.timezone\n      );\n    }\n    const opts = {\n      sql: sql,\n      values: values\n    };\n    this._resolveNamedPlaceholders(opts);\n    return SqlString.format(\n      opts.sql,\n      opts.values,\n      this.config.stringifyObjects,\n      this.config.timezone\n    );\n  }\n\n  escape(value) {\n    return SqlString.escape(value, false, this.config.timezone);\n  }\n\n  escapeId(value) {\n    return SqlString.escapeId(value, false);\n  }\n\n  raw(sql) {\n    return SqlString.raw(sql);\n  }\n\n  _resolveNamedPlaceholders(options) {\n    let unnamed;\n    if (this.config.namedPlaceholders || options.namedPlaceholders) {\n      if (Array.isArray(options.values)) {\n        // if an array is provided as the values, assume the conversion is not necessary.\n        // this allows the usage of unnamed placeholders even if the namedPlaceholders flag is enabled.\n        return\n      }\n      if (convertNamedPlaceholders === null) {\n        convertNamedPlaceholders = require('named-placeholders')();\n      }\n      unnamed = convertNamedPlaceholders(options.sql, options.values);\n      options.sql = unnamed[0];\n      options.values = unnamed[1];\n    }\n  }\n\n  query(sql, values, cb) {\n    let cmdQuery;\n    if (sql.constructor === Commands.Query) {\n      cmdQuery = sql;\n    } else {\n      cmdQuery = Connection.createQuery(sql, values, cb, this.config);\n    }\n    this._resolveNamedPlaceholders(cmdQuery);\n    const rawSql = this.format(cmdQuery.sql, cmdQuery.values !== undefined ? cmdQuery.values : []);\n    cmdQuery.sql = rawSql;\n    return this.addCommand(cmdQuery);\n  }\n\n  pause() {\n    this._paused = true;\n    this.stream.pause();\n  }\n\n  resume() {\n    let packet;\n    this._paused = false;\n    while ((packet = this._paused_packets.shift())) {\n      this.handlePacket(packet);\n      // don't resume if packet handler paused connection\n      if (this._paused) {\n        return;\n      }\n    }\n    this.stream.resume();\n  }\n\n  // TODO: named placeholders support\n  prepare(options, cb) {\n    if (typeof options === 'string') {\n      options = { sql: options };\n    }\n    return this.addCommand(new Commands.Prepare(options, cb));\n  }\n\n  unprepare(sql) {\n    let options = {};\n    if (typeof sql === 'object') {\n      options = sql;\n    } else {\n      options.sql = sql;\n    }\n    const key = Connection.statementKey(options);\n    const stmt = this._statements.get(key);\n    if (stmt) {\n      this._statements.delete(key);\n      stmt.close();\n    }\n    return stmt;\n  }\n\n  execute(sql, values, cb) {\n    let options = {\n      infileStreamFactory: this.config.infileStreamFactory\n    };\n    if (typeof sql === 'object') {\n      // execute(options, cb)\n      options = {\n        ...options,\n        ...sql\n      };\n      if (typeof values === 'function') {\n        cb = values;\n      } else {\n        options.values = options.values || values;\n      }\n    } else if (typeof values === 'function') {\n      // execute(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // execute(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n    this._resolveNamedPlaceholders(options);\n    // check for values containing undefined\n    if (options.values) {\n      //If namedPlaceholder is not enabled and object is passed as bind parameters\n      if (!Array.isArray(options.values)) {\n        throw new TypeError(\n          'Bind parameters must be array if namedPlaceholders parameter is not enabled'\n        );\n      }\n      options.values.forEach(val => {\n        //If namedPlaceholder is not enabled and object is passed as bind parameters\n        if (!Array.isArray(options.values)) {\n          throw new TypeError(\n            'Bind parameters must be array if namedPlaceholders parameter is not enabled'\n          );\n        }\n        if (val === undefined) {\n          throw new TypeError(\n            'Bind parameters must not contain undefined. To pass SQL NULL specify JS null'\n          );\n        }\n        if (typeof val === 'function') {\n          throw new TypeError(\n            'Bind parameters must not contain function(s). To pass the body of a function as a string call .toString() first'\n          );\n        }\n      });\n    }\n    const executeCommand = new Commands.Execute(options, cb);\n    const prepareCommand = new Commands.Prepare(options, (err, stmt) => {\n      if (err) {\n        // skip execute command if prepare failed, we have main\n        // combined callback here\n        executeCommand.start = function() {\n          return null;\n        };\n        if (cb) {\n          cb(err);\n        } else {\n          executeCommand.emit('error', err);\n        }\n        executeCommand.emit('end');\n        return;\n      }\n      executeCommand.statement = stmt;\n    });\n    this.addCommand(prepareCommand);\n    this.addCommand(executeCommand);\n    return executeCommand;\n  }\n\n  changeUser(options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    const charsetNumber = options.charset\n      ? ConnectionConfig.getCharsetNumber(options.charset)\n      : this.config.charsetNumber;\n    return this.addCommand(\n      new Commands.ChangeUser(\n        {\n          user: options.user || this.config.user,\n          // for the purpose of multi-factor authentication, or not, the main\n          // password (used for the 1st authentication factor) can also be\n          // provided via the \"password1\" option\n          password: options.password || options.password1 || this.config.password || this.config.password1,\n          password2: options.password2 || this.config.password2,\n          password3: options.password3 || this.config.password3,\n          passwordSha1: options.passwordSha1 || this.config.passwordSha1,\n          database: options.database || this.config.database,\n          timeout: options.timeout,\n          charsetNumber: charsetNumber,\n          currentConfig: this.config\n        },\n        err => {\n          if (err) {\n            err.fatal = true;\n          }\n          if (callback) {\n            callback(err);\n          }\n        }\n      )\n    );\n  }\n\n  // transaction helpers\n  beginTransaction(cb) {\n    return this.query('START TRANSACTION', cb);\n  }\n\n  commit(cb) {\n    return this.query('COMMIT', cb);\n  }\n\n  rollback(cb) {\n    return this.query('ROLLBACK', cb);\n  }\n\n  ping(cb) {\n    return this.addCommand(new Commands.Ping(cb));\n  }\n\n  _registerSlave(opts, cb) {\n    return this.addCommand(new Commands.RegisterSlave(opts, cb));\n  }\n\n  _binlogDump(opts, cb) {\n    return this.addCommand(new Commands.BinlogDump(opts, cb));\n  }\n\n  // currently just alias to close\n  destroy() {\n    this.close();\n  }\n\n  close() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this._closing = true;\n    this.stream.end();\n    this.addCommand = this._addCommandClosedState;\n  }\n\n  createBinlogStream(opts) {\n    // TODO: create proper stream class\n    // TODO: use through2\n    let test = 1;\n    const stream = new Readable({ objectMode: true });\n    stream._read = function() {\n      return {\n        data: test++\n      };\n    };\n    this._registerSlave(opts, () => {\n      const dumpCmd = this._binlogDump(opts);\n      dumpCmd.on('event', ev => {\n        stream.push(ev);\n      });\n      dumpCmd.on('eof', () => {\n        stream.push(null);\n        // if non-blocking, then close stream to prevent errors\n        if (opts.flags && opts.flags & 0x01) {\n          this.close();\n        }\n      });\n      // TODO: pipe errors as well\n    });\n    return stream;\n  }\n\n  connect(cb) {\n    if (!cb) {\n      return;\n    }\n    if (this._fatalError || this._protocolError) {\n      return cb(this._fatalError || this._protocolError);\n    }\n    if (this._handshakePacket) {\n      return cb(null, this);\n    }\n    let connectCalled = 0;\n    function callbackOnce(isErrorHandler) {\n      return function(param) {\n        if (!connectCalled) {\n          if (isErrorHandler) {\n            cb(param);\n          } else {\n            cb(null, param);\n          }\n        }\n        connectCalled = 1;\n      };\n    }\n    this.once('error', callbackOnce(true));\n    this.once('connect', callbackOnce(false));\n  }\n\n  // ===================================\n  // outgoing server connection methods\n  // ===================================\n  writeColumns(columns) {\n    this.writePacket(Packets.ResultSetHeader.toPacket(columns.length));\n    columns.forEach(column => {\n      this.writePacket(\n        Packets.ColumnDefinition.toPacket(column, this.serverConfig.encoding)\n      );\n    });\n    this.writeEof();\n  }\n\n  // row is array of columns, not hash\n  writeTextRow(column) {\n    this.writePacket(\n      Packets.TextRow.toPacket(column, this.serverConfig.encoding)\n    );\n  }\n\n  writeBinaryRow(column) {\n    this.writePacket(\n      Packets.BinaryRow.toPacket(column, this.serverConfig.encoding)\n    );\n  }\n\n  writeTextResult(rows, columns, binary=false) {\n    this.writeColumns(columns);\n    rows.forEach(row => {\n      const arrayRow = new Array(columns.length);\n      columns.forEach(column => {\n        arrayRow.push(row[column.name]);\n      });\n      if(binary) {\n        this.writeBinaryRow(arrayRow);\n      }\n      else this.writeTextRow(arrayRow);\n    });\n    this.writeEof();\n  }\n\n  writeEof(warnings, statusFlags) {\n    this.writePacket(Packets.EOF.toPacket(warnings, statusFlags));\n  }\n\n  writeOk(args) {\n    if (!args) {\n      args = { affectedRows: 0 };\n    }\n    this.writePacket(Packets.OK.toPacket(args, this.serverConfig.encoding));\n  }\n\n  writeError(args) {\n    // if we want to send error before initial hello was sent, use default encoding\n    const encoding = this.serverConfig ? this.serverConfig.encoding : 'cesu8';\n    this.writePacket(Packets.Error.toPacket(args, encoding));\n  }\n\n  serverHandshake(args) {\n    this.serverConfig = args;\n    this.serverConfig.encoding =\n      CharsetToEncoding[this.serverConfig.characterSet];\n    return this.addCommand(new Commands.ServerHandshake(args));\n  }\n\n  // ===============================================================\n  end(callback) {\n    if (this.config.isServer) {\n      this._closing = true;\n      const quitCmd = new EventEmitter();\n      setImmediate(() => {\n        this.stream.end();\n        quitCmd.emit('end');\n      });\n      return quitCmd;\n    }\n    // trigger error if more commands enqueued after end command\n    const quitCmd = this.addCommand(new Commands.Quit(callback));\n    this.addCommand = this._addCommandClosedState;\n    return quitCmd;\n  }\n\n  static createQuery(sql, values, cb, config) {\n    let options = {\n      rowsAsArray: config.rowsAsArray,\n      infileStreamFactory: config.infileStreamFactory\n    };\n    if (typeof sql === 'object') {\n      // query(options, cb)\n      options = {\n        ...options,\n        ...sql\n      };\n      if (typeof values === 'function') {\n        cb = values;\n      } else if (values !== undefined) {\n        options.values = values;\n      }\n    } else if (typeof values === 'function') {\n      // query(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // query(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n    return new Commands.Query(options, cb);\n  }\n\n  static statementKey(options) {\n    return (\n      `${typeof options.nestTables}/${options.nestTables}/${options.rowsAsArray}${options.sql}`\n    );\n  }\n}\n\nmodule.exports = Connection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}