{"ast":null,"code":"'use strict';\n\n// connection mixins\n// implementation of http://dev.mysql.com/doc/internals/en/compression.html\nconst zlib = require('zlib');\nconst PacketParser = require('./packet_parser.js');\nfunction handleCompressedPacket(packet) {\n  // eslint-disable-next-line consistent-this, no-invalid-this\n  const connection = this;\n  const deflatedLength = packet.readInt24();\n  const body = packet.readBuffer();\n  if (deflatedLength !== 0) {\n    connection.inflateQueue.push(task => {\n      zlib.inflate(body, (err, data) => {\n        if (err) {\n          connection._handleNetworkError(err);\n          return;\n        }\n        connection._bumpCompressedSequenceId(packet.numPackets);\n        connection._inflatedPacketsParser.execute(data);\n        task.done();\n      });\n    });\n  } else {\n    connection.inflateQueue.push(task => {\n      connection._bumpCompressedSequenceId(packet.numPackets);\n      connection._inflatedPacketsParser.execute(body);\n      task.done();\n    });\n  }\n}\nfunction writeCompressed(buffer) {\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n  // note: sending a MySQL Packet of the size 2^24−5 to 2^24−1 via compression\n  // leads to at least one extra compressed packet.\n  // (this is because \"length of the packet before compression\" need to fit\n  // into 3 byte unsigned int. \"length of the packet before compression\" includes\n  // 4 byte packet header, hence 2^24−5)\n  const MAX_COMPRESSED_LENGTH = 16777210;\n  let start;\n  if (buffer.length > MAX_COMPRESSED_LENGTH) {\n    for (start = 0; start < buffer.length; start += MAX_COMPRESSED_LENGTH) {\n      writeCompressed.call(\n      // eslint-disable-next-line no-invalid-this\n      this, buffer.slice(start, start + MAX_COMPRESSED_LENGTH));\n    }\n    return;\n  }\n\n  // eslint-disable-next-line no-invalid-this, consistent-this\n  const connection = this;\n  let packetLen = buffer.length;\n  const compressHeader = Buffer.allocUnsafe(7);\n\n  // seqqueue is used here because zlib async execution is routed via thread pool\n  // internally and when we have multiple compressed packets arriving we need\n  // to assemble uncompressed result sequentially\n  (function (seqId) {\n    connection.deflateQueue.push(task => {\n      zlib.deflate(buffer, (err, compressed) => {\n        if (err) {\n          connection._handleFatalError(err);\n          return;\n        }\n        let compressedLength = compressed.length;\n        if (compressedLength < packetLen) {\n          compressHeader.writeUInt8(compressedLength & 0xff, 0);\n          compressHeader.writeUInt16LE(compressedLength >> 8, 1);\n          compressHeader.writeUInt8(seqId, 3);\n          compressHeader.writeUInt8(packetLen & 0xff, 4);\n          compressHeader.writeUInt16LE(packetLen >> 8, 5);\n          connection.writeUncompressed(compressHeader);\n          connection.writeUncompressed(compressed);\n        } else {\n          // http://dev.mysql.com/doc/internals/en/uncompressed-payload.html\n          // To send an uncompressed payload:\n          //   - set length of payload before compression to 0\n          //   - the compressed payload contains the uncompressed payload instead.\n          compressedLength = packetLen;\n          packetLen = 0;\n          compressHeader.writeUInt8(compressedLength & 0xff, 0);\n          compressHeader.writeUInt16LE(compressedLength >> 8, 1);\n          compressHeader.writeUInt8(seqId, 3);\n          compressHeader.writeUInt8(packetLen & 0xff, 4);\n          compressHeader.writeUInt16LE(packetLen >> 8, 5);\n          connection.writeUncompressed(compressHeader);\n          connection.writeUncompressed(buffer);\n        }\n        task.done();\n      });\n    });\n  })(connection.compressedSequenceId);\n  connection._bumpCompressedSequenceId(1);\n}\nfunction enableCompression(connection) {\n  connection._lastWrittenPacketId = 0;\n  connection._lastReceivedPacketId = 0;\n  connection._handleCompressedPacket = handleCompressedPacket;\n  connection._inflatedPacketsParser = new PacketParser(p => {\n    connection.handlePacket(p);\n  }, 4);\n  connection._inflatedPacketsParser._lastPacket = 0;\n  connection.packetParser = new PacketParser(packet => {\n    connection._handleCompressedPacket(packet);\n  }, 7);\n  connection.writeUncompressed = connection.write;\n  connection.write = writeCompressed;\n  const seqqueue = require('seq-queue');\n  connection.inflateQueue = seqqueue.createQueue();\n  connection.deflateQueue = seqqueue.createQueue();\n}\nmodule.exports = {\n  enableCompression: enableCompression\n};","map":{"version":3,"names":["zlib","require","PacketParser","handleCompressedPacket","packet","connection","deflatedLength","readInt24","body","readBuffer","inflateQueue","push","task","inflate","err","data","_handleNetworkError","_bumpCompressedSequenceId","numPackets","_inflatedPacketsParser","execute","done","writeCompressed","buffer","MAX_COMPRESSED_LENGTH","start","length","call","slice","packetLen","compressHeader","Buffer","allocUnsafe","seqId","deflateQueue","deflate","compressed","_handleFatalError","compressedLength","writeUInt8","writeUInt16LE","writeUncompressed","compressedSequenceId","enableCompression","_lastWrittenPacketId","_lastReceivedPacketId","_handleCompressedPacket","p","handlePacket","_lastPacket","packetParser","write","seqqueue","createQueue","module","exports"],"sources":["C:/Users/runes/FYP/myfoodchoice/node_modules/mysql2/lib/compressed_protocol.js"],"sourcesContent":["'use strict';\n\n// connection mixins\n// implementation of http://dev.mysql.com/doc/internals/en/compression.html\n\nconst zlib = require('zlib');\nconst PacketParser = require('./packet_parser.js');\n\nfunction handleCompressedPacket(packet) {\n  // eslint-disable-next-line consistent-this, no-invalid-this\n  const connection = this;\n  const deflatedLength = packet.readInt24();\n  const body = packet.readBuffer();\n\n  if (deflatedLength !== 0) {\n    connection.inflateQueue.push(task => {\n      zlib.inflate(body, (err, data) => {\n        if (err) {\n          connection._handleNetworkError(err);\n          return;\n        }\n        connection._bumpCompressedSequenceId(packet.numPackets);\n        connection._inflatedPacketsParser.execute(data);\n        task.done();\n      });\n    });\n  } else {\n    connection.inflateQueue.push(task => {\n      connection._bumpCompressedSequenceId(packet.numPackets);\n      connection._inflatedPacketsParser.execute(body);\n      task.done();\n    });\n  }\n}\n\nfunction writeCompressed(buffer) {\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n  // note: sending a MySQL Packet of the size 2^24−5 to 2^24−1 via compression\n  // leads to at least one extra compressed packet.\n  // (this is because \"length of the packet before compression\" need to fit\n  // into 3 byte unsigned int. \"length of the packet before compression\" includes\n  // 4 byte packet header, hence 2^24−5)\n  const MAX_COMPRESSED_LENGTH = 16777210;\n  let start;\n  if (buffer.length > MAX_COMPRESSED_LENGTH) {\n    for (start = 0; start < buffer.length; start += MAX_COMPRESSED_LENGTH) {\n      writeCompressed.call(\n        // eslint-disable-next-line no-invalid-this\n        this,\n        buffer.slice(start, start + MAX_COMPRESSED_LENGTH)\n      );\n    }\n    return;\n  }\n\n  // eslint-disable-next-line no-invalid-this, consistent-this\n  const connection = this;\n\n  let packetLen = buffer.length;\n  const compressHeader = Buffer.allocUnsafe(7);\n\n  // seqqueue is used here because zlib async execution is routed via thread pool\n  // internally and when we have multiple compressed packets arriving we need\n  // to assemble uncompressed result sequentially\n  (function(seqId) {\n    connection.deflateQueue.push(task => {\n      zlib.deflate(buffer, (err, compressed) => {\n        if (err) {\n          connection._handleFatalError(err);\n          return;\n        }\n        let compressedLength = compressed.length;\n\n        if (compressedLength < packetLen) {\n          compressHeader.writeUInt8(compressedLength & 0xff, 0);\n          compressHeader.writeUInt16LE(compressedLength >> 8, 1);\n          compressHeader.writeUInt8(seqId, 3);\n          compressHeader.writeUInt8(packetLen & 0xff, 4);\n          compressHeader.writeUInt16LE(packetLen >> 8, 5);\n          connection.writeUncompressed(compressHeader);\n          connection.writeUncompressed(compressed);\n        } else {\n          // http://dev.mysql.com/doc/internals/en/uncompressed-payload.html\n          // To send an uncompressed payload:\n          //   - set length of payload before compression to 0\n          //   - the compressed payload contains the uncompressed payload instead.\n          compressedLength = packetLen;\n          packetLen = 0;\n          compressHeader.writeUInt8(compressedLength & 0xff, 0);\n          compressHeader.writeUInt16LE(compressedLength >> 8, 1);\n          compressHeader.writeUInt8(seqId, 3);\n          compressHeader.writeUInt8(packetLen & 0xff, 4);\n          compressHeader.writeUInt16LE(packetLen >> 8, 5);\n          connection.writeUncompressed(compressHeader);\n          connection.writeUncompressed(buffer);\n        }\n        task.done();\n      });\n    });\n  })(connection.compressedSequenceId);\n  connection._bumpCompressedSequenceId(1);\n}\n\nfunction enableCompression(connection) {\n  connection._lastWrittenPacketId = 0;\n  connection._lastReceivedPacketId = 0;\n\n  connection._handleCompressedPacket = handleCompressedPacket;\n  connection._inflatedPacketsParser = new PacketParser(p => {\n    connection.handlePacket(p);\n  }, 4);\n  connection._inflatedPacketsParser._lastPacket = 0;\n  connection.packetParser = new PacketParser(packet => {\n    connection._handleCompressedPacket(packet);\n  }, 7);\n\n  connection.writeUncompressed = connection.write;\n  connection.write = writeCompressed;\n\n  const seqqueue = require('seq-queue');\n  connection.inflateQueue = seqqueue.createQueue();\n  connection.deflateQueue = seqqueue.createQueue();\n}\n\nmodule.exports = {\n  enableCompression: enableCompression\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}