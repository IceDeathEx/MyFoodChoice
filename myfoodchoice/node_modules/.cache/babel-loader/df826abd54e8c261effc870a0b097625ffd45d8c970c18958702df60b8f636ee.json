{"ast":null,"code":"'use strict';\n\n/*\n\n  this seems to be not only shorter, but faster than\n  string.replace(/\\\\/g, '\\\\\\\\').\n            replace(/\\u0008/g, '\\\\b').\n            replace(/\\t/g, '\\\\t').\n            replace(/\\n/g, '\\\\n').\n            replace(/\\f/g, '\\\\f').\n            replace(/\\r/g, '\\\\r').\n            replace(/'/g, '\\\\\\'').\n            replace(/\"/g, '\\\\\"');\n  or string.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\")\n  see http://jsperf.com/string-escape-regexp-vs-json-stringify\n  */\nfunction srcEscape(str) {\n  return JSON.stringify({\n    [str]: 1\n  }).slice(1, -3);\n}\nexports.srcEscape = srcEscape;\nlet highlightFn;\nlet cardinalRecommended = false;\ntry {\n  // the purpose of this is to prevent projects using Webpack from displaying a warning during runtime if cardinal is not a dependency\n  const REQUIRE_TERMINATOR = '';\n  highlightFn = require(`cardinal${REQUIRE_TERMINATOR}`).highlight;\n} catch (err) {\n  highlightFn = text => {\n    if (!cardinalRecommended) {\n      // eslint-disable-next-line no-console\n      console.log('For nicer debug output consider install cardinal@^2.0.0');\n      cardinalRecommended = true;\n    }\n    return text;\n  };\n}\n\n/**\n * Prints debug message with code frame, will try to use `cardinal` if available.\n */\nfunction printDebugWithCode(msg, code) {\n  // eslint-disable-next-line no-console\n  console.log(`\\n\\n${msg}:\\n`);\n  // eslint-disable-next-line no-console\n  console.log(`${highlightFn(code)}\\n`);\n}\nexports.printDebugWithCode = printDebugWithCode;\n\n/**\n * checks whether the `type` is in the `list`\n */\nfunction typeMatch(type, list, Types) {\n  if (Array.isArray(list)) {\n    return list.some(t => type === Types[t]);\n  }\n  return !!list;\n}\nexports.typeMatch = typeMatch;","map":{"version":3,"names":["srcEscape","str","JSON","stringify","slice","exports","highlightFn","cardinalRecommended","REQUIRE_TERMINATOR","require","highlight","err","text","console","log","printDebugWithCode","msg","code","typeMatch","type","list","Types","Array","isArray","some","t"],"sources":["C:/Users/runes/FYP/myfoodchoice/node_modules/mysql2/lib/helpers.js"],"sourcesContent":["'use strict';\n\n/*\n\n  this seems to be not only shorter, but faster than\n  string.replace(/\\\\/g, '\\\\\\\\').\n            replace(/\\u0008/g, '\\\\b').\n            replace(/\\t/g, '\\\\t').\n            replace(/\\n/g, '\\\\n').\n            replace(/\\f/g, '\\\\f').\n            replace(/\\r/g, '\\\\r').\n            replace(/'/g, '\\\\\\'').\n            replace(/\"/g, '\\\\\"');\n  or string.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\")\n  see http://jsperf.com/string-escape-regexp-vs-json-stringify\n  */\nfunction srcEscape(str) {\n  return JSON.stringify({\n    [str]: 1\n  }).slice(1, -3);\n}\n\nexports.srcEscape = srcEscape;\n\nlet highlightFn;\nlet cardinalRecommended = false;\ntry {\n  // the purpose of this is to prevent projects using Webpack from displaying a warning during runtime if cardinal is not a dependency\n  const REQUIRE_TERMINATOR = '';\n  highlightFn = require(`cardinal${REQUIRE_TERMINATOR}`).highlight;\n} catch (err) {\n  highlightFn = text => {\n    if (!cardinalRecommended) {\n      // eslint-disable-next-line no-console\n      console.log('For nicer debug output consider install cardinal@^2.0.0');\n      cardinalRecommended = true;\n    }\n    return text;\n  };\n}\n\n/**\n * Prints debug message with code frame, will try to use `cardinal` if available.\n */\nfunction printDebugWithCode(msg, code) {\n  // eslint-disable-next-line no-console\n  console.log(`\\n\\n${msg}:\\n`);\n  // eslint-disable-next-line no-console\n  console.log(`${highlightFn(code)}\\n`);\n}\n\nexports.printDebugWithCode = printDebugWithCode;\n\n/**\n * checks whether the `type` is in the `list`\n */\nfunction typeMatch(type, list, Types) {\n  if (Array.isArray(list)) {\n    return list.some(t => type === Types[t]);\n  }\n\n  return !!list;\n}\n\nexports.typeMatch = typeMatch;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAASA,CAACC,GAAG,EAAE;EACtB,OAAOC,IAAI,CAACC,SAAS,CAAC;IACpB,CAACF,GAAG,GAAG;EACT,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACjB;AAEAC,OAAO,CAACL,SAAS,GAAGA,SAAS;AAE7B,IAAIM,WAAW;AACf,IAAIC,mBAAmB,GAAG,KAAK;AAC/B,IAAI;EACF;EACA,MAAMC,kBAAkB,GAAG,EAAE;EAC7BF,WAAW,GAAGG,OAAO,CAAE,WAAUD,kBAAmB,EAAC,CAAC,CAACE,SAAS;AAClE,CAAC,CAAC,OAAOC,GAAG,EAAE;EACZL,WAAW,GAAGM,IAAI,IAAI;IACpB,IAAI,CAACL,mBAAmB,EAAE;MACxB;MACAM,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;MACtEP,mBAAmB,GAAG,IAAI;IAC5B;IACA,OAAOK,IAAI;EACb,CAAC;AACH;;AAEA;AACA;AACA;AACA,SAASG,kBAAkBA,CAACC,GAAG,EAAEC,IAAI,EAAE;EACrC;EACAJ,OAAO,CAACC,GAAG,CAAE,OAAME,GAAI,KAAI,CAAC;EAC5B;EACAH,OAAO,CAACC,GAAG,CAAE,GAAER,WAAW,CAACW,IAAI,CAAE,IAAG,CAAC;AACvC;AAEAZ,OAAO,CAACU,kBAAkB,GAAGA,kBAAkB;;AAE/C;AACA;AACA;AACA,SAASG,SAASA,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;EACpC,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;IACvB,OAAOA,IAAI,CAACI,IAAI,CAACC,CAAC,IAAIN,IAAI,KAAKE,KAAK,CAACI,CAAC,CAAC,CAAC;EAC1C;EAEA,OAAO,CAAC,CAACL,IAAI;AACf;AAEAf,OAAO,CAACa,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}